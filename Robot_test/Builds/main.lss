
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000304  00800200  0000228c  00002320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000228c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  00800504  00800504  00002624  2**0
                  ALLOC
  3 .stab         00004d70  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f96  00000000  00000000  00007394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000932a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00009340  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  000093e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  00009796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ed  00000000  00000000  000097fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_5>
      18:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_6>
      1c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_7>
      20:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_8>
      24:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_9>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_21>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_32>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_36>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	13 06       	cpc	r1, r19
      ce:	47 06       	cpc	r4, r23
      d0:	5b 06       	cpc	r5, r27
      d2:	5b 06       	cpc	r5, r27
      d4:	df 06       	cpc	r13, r31
      d6:	6e 06       	cpc	r6, r30
      d8:	7d 06       	cpc	r7, r29
      da:	90 06       	cpc	r9, r16
      dc:	9f 06       	cpc	r9, r31
      de:	b2 06       	cpc	r11, r18
      e0:	c1 06       	cpc	r12, r17
      e2:	d0 06       	cpc	r13, r16
      e4:	df 06       	cpc	r13, r31
      e6:	f2 06       	cpc	r15, r18
      e8:	01 07       	cpc	r16, r17
      ea:	10 07       	cpc	r17, r16
      ec:	db 0d       	add	r29, r11
      ee:	18 0e       	add	r1, r24
      f0:	44 0e       	add	r4, r20
      f2:	9d 0e       	add	r9, r29
      f4:	d1 0e       	add	r13, r17
      f6:	22 0f       	add	r18, r18
      f8:	47 0f       	add	r20, r23
      fa:	5e 0f       	add	r21, r30

000000fc <__trampolines_start>:
      fc:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <lineStateMachine+0xa2>
     100:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <mainState+0x20>
     104:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <lineStateMachine+0xe6>
     108:	0c 94 13 06 	jmp	0xc26	; 0xc26 <lineStateMachine+0x12>
     10c:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <lineStateMachine+0x7a>
     110:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <mainState+0x9a>
     114:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <lineStateMachine+0x18c>
     118:	0c 94 90 06 	jmp	0xd20	; 0xd20 <lineStateMachine+0x10c>
     11c:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <lineStateMachine+0x1d0>
     120:	0c 94 01 07 	jmp	0xe02	; 0xe02 <lineStateMachine+0x1ee>
     124:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <lineStateMachine+0x16e>
     128:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <lineStateMachine+0x12a>
     12c:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <mainState+0x2ae>
     130:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <lineStateMachine+0xc8>
     134:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <mainState+0x2f8>
     138:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <lineStateMachine+0x150>
     13c:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <mainState+0x20c>
     140:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <mainState+0x326>
     144:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <lineStateMachine+0x1aa>
     148:	0c 94 10 07 	jmp	0xe20	; 0xe20 <lineStateMachine+0x20c>
     14c:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <mainState+0x1a4>
     150:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <mainState+0xf2>

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d1 e2       	ldi	r29, 0x21	; 33
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0c bf       	out	0x3c, r16	; 60

00000164 <wdt_init>:
     164:	14 be       	out	0x34, r1	; 52
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	80 93 60 00 	sts	0x0060, r24
     170:	10 92 60 00 	sts	0x0060, r1
     174:	0f be       	out	0x3f, r0	; 63

00000176 <__do_copy_data>:
     176:	15 e0       	ldi	r17, 0x05	; 5
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec e8       	ldi	r30, 0x8C	; 140
     17e:	f2 e2       	ldi	r31, 0x22	; 34
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 30       	cpi	r26, 0x04	; 4
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	25 e0       	ldi	r18, 0x05	; 5
     192:	a4 e0       	ldi	r26, 0x04	; 4
     194:	b5 e0       	ldi	r27, 0x05	; 5
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 3f       	cpi	r26, 0xF7	; 247
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <main>
     1a4:	0c 94 44 11 	jmp	0x2288	; 0x2288 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <init_ADC>:
#include <avr/io.h>

// Initialize adc
void init_ADC(void)
{
    ADCSRA |= (1<<ADPS2);   // Set Prescaler /16
     1ac:	ea e7       	ldi	r30, 0x7A	; 122
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	84 60       	ori	r24, 0x04	; 4
     1b4:	80 83       	st	Z, r24
    ADMUX  |= (1<<REFS0);     // Voltage reference Avcc
     1b6:	ac e7       	ldi	r26, 0x7C	; 124
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	8c 91       	ld	r24, X
     1bc:	80 64       	ori	r24, 0x40	; 64
     1be:	8c 93       	st	X, r24
    ADCSRA |= 1<<ADEN;      // Enable ADC
     1c0:	80 81       	ld	r24, Z
     1c2:	80 68       	ori	r24, 0x80	; 128
     1c4:	80 83       	st	Z, r24
    ADCSRA |= 1<<ADSC;      // Start conversion
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <HCSR04_init>:



void HCSR04_init(void)
{
    HC_SR04_FRONT_TRIG_DDR |= (1 << HC_SR04_FRONT_TRIG);     //output - Trig
     1ce:	9c 9a       	sbi	0x13, 4	; 19
    HC_SR04_FRONT_ECHO_DDR &= ~(1 << HC_SR04_FRONT_ECHO);	//input - Echo
     1d0:	24 98       	cbi	0x04, 4	; 4
    
    HC_SR04_SIDE_TRIG_DDR |= (1 << HC_SR04_SIDE_TRIG);     //output - Trig
     1d2:	9b 9a       	sbi	0x13, 3	; 19
    HC_SR04_SIDE_ECHO_DDR &= ~(1 << HC_SR04_SIDE_ECHO);	//input - Echo
     1d4:	27 98       	cbi	0x04, 7	; 4
     1d6:	08 95       	ret

000001d8 <timer_start>:
    
    // start 16-bit timer Timer3
    //cli();
    
    // set up timer with no prescaler and CTC mode
    TCCR3B |= (1 << WGM32)|(1 << CS30);
     1d8:	e1 e9       	ldi	r30, 0x91	; 145
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	89 60       	ori	r24, 0x09	; 9
     1e0:	80 83       	st	Z, r24
    
    // initialize counter
    TCNT3 = 0;
     1e2:	10 92 95 00 	sts	0x0095, r1
     1e6:	10 92 94 00 	sts	0x0094, r1
    
    // initialize compare value 1 pulse is 58 microseconds
    OCR3A = 1068; // Should be 58us/0,05425347 - 1 = 1068, but measured on scope to ??891
     1ea:	8c e2       	ldi	r24, 0x2C	; 44
     1ec:	94 e0       	ldi	r25, 0x04	; 4
     1ee:	90 93 99 00 	sts	0x0099, r25
     1f2:	80 93 98 00 	sts	0x0098, r24
    
    // enable compare interrupt
    TIMSK3 |= (1 << OCIE3A);
     1f6:	e1 e7       	ldi	r30, 0x71	; 113
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	82 60       	ori	r24, 0x02	; 2
     1fe:	80 83       	st	Z, r24
     200:	08 95       	ret

00000202 <timer_stop>:
    
}

void timer_stop(void)
{
    TCCR3B = 0x0;
     202:	10 92 91 00 	sts	0x0091, r1
     206:	08 95       	ret

00000208 <send_pulse>:
}


void send_pulse(int sensor)
{
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	ec 01       	movw	r28, r24
    // 0 = front sensor
    // 1 = side sensor
    
    // send trigger pulse
    DDRA |= (1<<PA0);
     20e:	08 9a       	sbi	0x01, 0	; 1
    PORTA |= (1<<PA0);
     210:	10 9a       	sbi	0x02, 0	; 2
    
    
    // Pin low
    microsec = 0;
     212:	10 92 07 05 	sts	0x0507, r1
     216:	10 92 06 05 	sts	0x0506, r1
    timer_start();
     21a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <timer_start>
    
    while (microsec <= 1){
     21e:	80 91 06 05 	lds	r24, 0x0506
     222:	90 91 07 05 	lds	r25, 0x0507
     226:	02 97       	sbiw	r24, 0x02	; 2
     228:	30 f4       	brcc	.+12     	; 0x236 <send_pulse+0x2e>
        
        if (sensor == 0) {
     22a:	20 97       	sbiw	r28, 0x00	; 0
     22c:	11 f4       	brne	.+4      	; 0x232 <send_pulse+0x2a>
            HC_SR04_FRONT_TRIG_PORT &= ~(1 << HC_SR04_FRONT_TRIG);   // Pulldown trigger FRONT
     22e:	a4 98       	cbi	0x14, 4	; 20
     230:	f6 cf       	rjmp	.-20     	; 0x21e <send_pulse+0x16>
        }
        else
        {
            HC_SR04_SIDE_TRIG_PORT &= ~(1 << HC_SR04_SIDE_TRIG);   // Pulldown trigger SIDE
     232:	a3 98       	cbi	0x14, 3	; 20
     234:	f4 cf       	rjmp	.-24     	; 0x21e <send_pulse+0x16>
    
}

void timer_stop(void)
{
    TCCR3B = 0x0;
     236:	10 92 91 00 	sts	0x0091, r1
    timer_stop();
    
    
    
    // Pin high
    microsec = 0;
     23a:	10 92 07 05 	sts	0x0507, r1
     23e:	10 92 06 05 	sts	0x0506, r1
    timer_start();
     242:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <timer_start>
    while (microsec <= 1){
     246:	80 91 06 05 	lds	r24, 0x0506
     24a:	90 91 07 05 	lds	r25, 0x0507
     24e:	02 97       	sbiw	r24, 0x02	; 2
     250:	30 f4       	brcc	.+12     	; 0x25e <send_pulse+0x56>
        
        if (sensor == 0) {
     252:	20 97       	sbiw	r28, 0x00	; 0
     254:	11 f4       	brne	.+4      	; 0x25a <send_pulse+0x52>
            HC_SR04_FRONT_TRIG_PORT |= (1 << HC_SR04_FRONT_TRIG);    // Pullup trigger FRONT
     256:	a4 9a       	sbi	0x14, 4	; 20
     258:	f6 cf       	rjmp	.-20     	; 0x246 <send_pulse+0x3e>
        }
        else
        {
            HC_SR04_SIDE_TRIG_PORT |= (1 << HC_SR04_SIDE_TRIG);    // Pullup trigger SIDE
     25a:	a3 9a       	sbi	0x14, 3	; 20
     25c:	f4 cf       	rjmp	.-24     	; 0x246 <send_pulse+0x3e>
    
}

void timer_stop(void)
{
    TCCR3B = 0x0;
     25e:	10 92 91 00 	sts	0x0091, r1
    }
    timer_stop();
    
    
    // Pin low
    microsec = 0;
     262:	10 92 07 05 	sts	0x0507, r1
     266:	10 92 06 05 	sts	0x0506, r1
    timer_start();
     26a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <timer_start>
    while (microsec <= 1)
     26e:	80 91 06 05 	lds	r24, 0x0506
     272:	90 91 07 05 	lds	r25, 0x0507
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	30 f4       	brcc	.+12     	; 0x286 <send_pulse+0x7e>
    {
        if (sensor == 0) {
     27a:	20 97       	sbiw	r28, 0x00	; 0
     27c:	11 f4       	brne	.+4      	; 0x282 <send_pulse+0x7a>
            HC_SR04_FRONT_TRIG_PORT &= ~(1 << HC_SR04_FRONT_TRIG);   // Pulldown trigger FRONT
     27e:	a4 98       	cbi	0x14, 4	; 20
     280:	f6 cf       	rjmp	.-20     	; 0x26e <send_pulse+0x66>
        }
        else
        {
            HC_SR04_SIDE_TRIG_PORT &= ~(1 << HC_SR04_SIDE_TRIG);   // Pulldown trigger SIDE
     282:	a3 98       	cbi	0x14, 3	; 20
     284:	f4 cf       	rjmp	.-24     	; 0x26e <send_pulse+0x66>
    
}

void timer_stop(void)
{
    TCCR3B = 0x0;
     286:	10 92 91 00 	sts	0x0091, r1
        {
            HC_SR04_SIDE_TRIG_PORT &= ~(1 << HC_SR04_SIDE_TRIG);   // Pulldown trigger SIDE
        }
    }
    timer_stop();
    microsec = 0;
     28a:	10 92 07 05 	sts	0x0507, r1
     28e:	10 92 06 05 	sts	0x0506, r1
    
    PORTA &= ~(1<<PA0);
     292:	10 98       	cbi	0x02, 0	; 2
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <HCSR04_get_distance_cm>:

// Length of echo pulse in microseconds
volatile uint8_t result = 0;

uint16_t HCSR04_get_distance_cm(int sensor)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
    // 1 = side sensor
    
    uint8_t distance;
    
    // Enable pin change interrupt
    cli();
     2a0:	f8 94       	cli
    PCICR |= (1 << PCIE0);
     2a2:	80 91 68 00 	lds	r24, 0x0068
     2a6:	81 60       	ori	r24, 0x01	; 1
     2a8:	80 93 68 00 	sts	0x0068, r24
    
    if (sensor == 0) {
        PCMSK0 |= (1 << PCINT4);
     2ac:	80 91 6b 00 	lds	r24, 0x006B
    
    // Enable pin change interrupt
    cli();
    PCICR |= (1 << PCIE0);
    
    if (sensor == 0) {
     2b0:	20 97       	sbiw	r28, 0x00	; 0
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <HCSR04_get_distance_cm+0x1e>
        PCMSK0 |= (1 << PCINT4);
     2b4:	80 61       	ori	r24, 0x10	; 16
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <HCSR04_get_distance_cm+0x20>
    }
    else
    {
        PCMSK0 |= (1 << PCINT7);
     2b8:	80 68       	ori	r24, 0x80	; 128
     2ba:	80 93 6b 00 	sts	0x006B, r24
    }
    
    sei();
     2be:	78 94       	sei
    
    // set echo flag
    echoDone = 0;
     2c0:	10 92 05 05 	sts	0x0505, r1
    
    // send pulse
    send_pulse(sensor);
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 04 01 	call	0x208	; 0x208 <send_pulse>
    
    // loop till echo pin goes low
    while(!echoDone);
     2ca:	80 91 05 05 	lds	r24, 0x0505
     2ce:	88 23       	and	r24, r24
     2d0:	e1 f3       	breq	.-8      	; 0x2ca <HCSR04_get_distance_cm+0x30>
    
    // disable pin-change interrupt:
    // disable interrupt
    PCICR &= ~(1 << PCIE0);
     2d2:	80 91 68 00 	lds	r24, 0x0068
     2d6:	8e 7f       	andi	r24, 0xFE	; 254
     2d8:	80 93 68 00 	sts	0x0068, r24
    // disable pin
    if (sensor == 0) {
        PCMSK0 &= ~(1 << PCINT4);
     2dc:	80 91 6b 00 	lds	r24, 0x006B
    
    // disable pin-change interrupt:
    // disable interrupt
    PCICR &= ~(1 << PCIE0);
    // disable pin
    if (sensor == 0) {
     2e0:	cd 2b       	or	r28, r29
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <HCSR04_get_distance_cm+0x4e>
        PCMSK0 &= ~(1 << PCINT4);
     2e4:	8f 7e       	andi	r24, 0xEF	; 239
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <HCSR04_get_distance_cm+0x50>
    }
    else
    {
        PCMSK0 &= ~(1 << PCINT7);
     2e8:	8f 77       	andi	r24, 0x7F	; 127
     2ea:	80 93 6b 00 	sts	0x006B, r24
    }
    
    
    // calculate distance in cm
    distance=result;
     2ee:	80 91 04 05 	lds	r24, 0x0504
    
    return distance;
}
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <__vector_32>:


ISR(TIMER3_COMPA_vect)
{
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	8f 93       	push	r24
     306:	9f 93       	push	r25
    microsec++;
     308:	80 91 06 05 	lds	r24, 0x0506
     30c:	90 91 07 05 	lds	r25, 0x0507
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	90 93 07 05 	sts	0x0507, r25
     316:	80 93 06 05 	sts	0x0506, r24
    TCNT3 = 0x00;
     31a:	10 92 95 00 	sts	0x0095, r1
     31e:	10 92 94 00 	sts	0x0094, r1
    
    //    DDRA |= (1<<PA0);
    //    PORTA ^= (1<<PA0);
}
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <__vector_9>:

// pin-change interrupt handler
ISR(PCINT0_vect)
{
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	0b b6       	in	r0, 0x3b	; 59
     33c:	0f 92       	push	r0
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
    // read PCINT0
    if((HC_SR04_FRONT_ECHO_PIN & (1 << HC_SR04_FRONT_ECHO)) || (HC_SR04_SIDE_ECHO_PIN & (1 << HC_SR04_SIDE_ECHO))) {
     356:	1c 99       	sbic	0x03, 4	; 3
     358:	02 c0       	rjmp	.+4      	; 0x35e <__vector_9+0x2e>
     35a:	1f 9b       	sbis	0x03, 7	; 3
     35c:	03 c0       	rjmp	.+6      	; 0x364 <__vector_9+0x34>
        // rising edge:
        
        // start 8-bit timer
        timer_start();
     35e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <timer_start>
     362:	0f c0       	rjmp	.+30     	; 0x382 <__vector_9+0x52>
    
}

void timer_stop(void)
{
    TCCR3B = 0x0;
     364:	10 92 91 00 	sts	0x0091, r1
        // falling edge
        
        
        timer_stop();       // stop timer
        
        result=microsec;    // Save result
     368:	80 91 06 05 	lds	r24, 0x0506
     36c:	90 91 07 05 	lds	r25, 0x0507
     370:	80 93 04 05 	sts	0x0504, r24
        
        microsec=0;         // Reset timer value
     374:	10 92 07 05 	sts	0x0507, r1
     378:	10 92 06 05 	sts	0x0506, r1
        
        echoDone = 1;       // set flag
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 05 05 	sts	0x0505, r24
    }
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	bf 91       	pop	r27
     388:	af 91       	pop	r26
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	7f 91       	pop	r23
     390:	6f 91       	pop	r22
     392:	5f 91       	pop	r21
     394:	4f 91       	pop	r20
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	0b be       	out	0x3b, r0	; 59
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <LineSensors_init>:



void LineSensors_init(void)
{
    MCU_DDR = (1<<MCU_PIN);     // Set mcu pin as output
     3a8:	80 e4       	ldi	r24, 0x40	; 64
     3aa:	87 b9       	out	0x07, r24	; 7
    MCU_PORT &= ~(1<<MCU_PIN);  // Set mcu pin low
     3ac:	46 98       	cbi	0x08, 6	; 8
     3ae:	08 95       	ret

000003b0 <convert>:
}


int convert(void)
{
    ADCSRA |= (1<<ADSC);  // Start conversion
     3b0:	80 91 7a 00 	lds	r24, 0x007A
     3b4:	80 64       	ori	r24, 0x40	; 64
     3b6:	80 93 7a 00 	sts	0x007A, r24
    
    while (ADCSRA &  (1<<ADIF));
     3ba:	80 91 7a 00 	lds	r24, 0x007A
     3be:	84 fd       	sbrc	r24, 4
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <convert+0xa>
    // wait until conversion  completes; ADSC=0 means Complete
    
    uint8_t lowADCL = ADCL;
     3c2:	80 91 78 00 	lds	r24, 0x0078
    uint16_t adcResult = ADCH<<8 | lowADCL;
     3c6:	20 91 79 00 	lds	r18, 0x0079
     3ca:	90 e0       	ldi	r25, 0x00	; 0
    
    return adcResult;
}
     3cc:	92 2b       	or	r25, r18
     3ce:	08 95       	ret

000003d0 <LineSensors_check_line>:

void LineSensors_check_line(int sensorNumber)
{
    uint16_t adcResult = 0;
    
    switch (sensorNumber) {
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	91 05       	cpc	r25, r1
     3d4:	69 f1       	breq	.+90     	; 0x430 <LineSensors_check_line+0x60>
     3d6:	1c f4       	brge	.+6      	; 0x3de <LineSensors_check_line+0xe>
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	49 f0       	breq	.+18     	; 0x3ee <LineSensors_check_line+0x1e>
     3dc:	93 c0       	rjmp	.+294    	; 0x504 <LineSensors_check_line+0x134>
     3de:	83 30       	cpi	r24, 0x03	; 3
     3e0:	91 05       	cpc	r25, r1
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <LineSensors_check_line+0x16>
     3e4:	46 c0       	rjmp	.+140    	; 0x472 <LineSensors_check_line+0xa2>
     3e6:	04 97       	sbiw	r24, 0x04	; 4
     3e8:	09 f4       	brne	.+2      	; 0x3ec <LineSensors_check_line+0x1c>
     3ea:	67 c0       	rjmp	.+206    	; 0x4ba <LineSensors_check_line+0xea>
     3ec:	8b c0       	rjmp	.+278    	; 0x504 <LineSensors_check_line+0x134>
        case 1:
            ADMUX = 0x41;
     3ee:	81 e4       	ldi	r24, 0x41	; 65
     3f0:	80 93 7c 00 	sts	0x007C, r24
            
            adcResult = convert();
     3f4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <convert>
            
            if (adcResult>SENSOR_1_THRESHOLD) {
     3f8:	83 3c       	cpi	r24, 0xC3	; 195
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	92 07       	cpc	r25, r18
     3fe:	20 f0       	brcs	.+8      	; 0x408 <LineSensors_check_line+0x38>
                binary |= 0x01;
     400:	20 91 08 05 	lds	r18, 0x0508
     404:	21 60       	ori	r18, 0x01	; 1
     406:	03 c0       	rjmp	.+6      	; 0x40e <LineSensors_check_line+0x3e>
            } else {
                binary &= ~0x01;
     408:	20 91 08 05 	lds	r18, 0x0508
     40c:	2e 7f       	andi	r18, 0xFE	; 254
     40e:	20 93 08 05 	sts	0x0508, r18
            }
            
            if (writeToTerminal)
     412:	20 91 09 05 	lds	r18, 0x0509
     416:	30 91 0a 05 	lds	r19, 0x050A
     41a:	23 2b       	or	r18, r19
     41c:	09 f4       	brne	.+2      	; 0x420 <LineSensors_check_line+0x50>
     41e:	72 c0       	rjmp	.+228    	; 0x504 <LineSensors_check_line+0x134>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     420:	4a e0       	ldi	r20, 0x0A	; 10
     422:	6c e4       	ldi	r22, 0x4C	; 76
     424:	75 e0       	ldi	r23, 0x05	; 5
     426:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
            {
                itoa(adcResult, adc1, 10);
                uart_puts(adc1);
     42a:	8c e4       	ldi	r24, 0x4C	; 76
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	40 c0       	rjmp	.+128    	; 0x4b0 <LineSensors_check_line+0xe0>
            }
            
            break;
            
        case 2:
            ADMUX = 0x42;
     430:	82 e4       	ldi	r24, 0x42	; 66
     432:	80 93 7c 00 	sts	0x007C, r24
            
            adcResult = convert();
     436:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <convert>
            
            if (adcResult>SENSOR_2_THRESHOLD) {
     43a:	89 35       	cpi	r24, 0x59	; 89
     43c:	22 e0       	ldi	r18, 0x02	; 2
     43e:	92 07       	cpc	r25, r18
     440:	20 f0       	brcs	.+8      	; 0x44a <LineSensors_check_line+0x7a>
                binary |= 0x02;
     442:	20 91 08 05 	lds	r18, 0x0508
     446:	22 60       	ori	r18, 0x02	; 2
     448:	03 c0       	rjmp	.+6      	; 0x450 <LineSensors_check_line+0x80>
            } else {
                binary &= ~0x02;
     44a:	20 91 08 05 	lds	r18, 0x0508
     44e:	2d 7f       	andi	r18, 0xFD	; 253
     450:	20 93 08 05 	sts	0x0508, r18
            }
            
            if (writeToTerminal)
     454:	20 91 09 05 	lds	r18, 0x0509
     458:	30 91 0a 05 	lds	r19, 0x050A
     45c:	23 2b       	or	r18, r19
     45e:	09 f4       	brne	.+2      	; 0x462 <LineSensors_check_line+0x92>
     460:	51 c0       	rjmp	.+162    	; 0x504 <LineSensors_check_line+0x134>
     462:	4a e0       	ldi	r20, 0x0A	; 10
     464:	60 e5       	ldi	r22, 0x50	; 80
     466:	75 e0       	ldi	r23, 0x05	; 5
     468:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
            {
                itoa(adcResult, adc2, 10);
                uart_puts(adc2);
     46c:	80 e5       	ldi	r24, 0x50	; 80
     46e:	95 e0       	ldi	r25, 0x05	; 5
     470:	1f c0       	rjmp	.+62     	; 0x4b0 <LineSensors_check_line+0xe0>
            }

            break;
            
        case 3:
            ADMUX = 0x43;
     472:	83 e4       	ldi	r24, 0x43	; 67
     474:	80 93 7c 00 	sts	0x007C, r24
            
            adcResult = convert();
     478:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <convert>
            
            if (adcResult>SENSOR_3_THRESHOLD) {
     47c:	83 3c       	cpi	r24, 0xC3	; 195
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	92 07       	cpc	r25, r18
     482:	20 f0       	brcs	.+8      	; 0x48c <LineSensors_check_line+0xbc>
                binary |= 0x04;
     484:	20 91 08 05 	lds	r18, 0x0508
     488:	24 60       	ori	r18, 0x04	; 4
     48a:	03 c0       	rjmp	.+6      	; 0x492 <LineSensors_check_line+0xc2>
            } else {
                binary &= ~0x04;
     48c:	20 91 08 05 	lds	r18, 0x0508
     490:	2b 7f       	andi	r18, 0xFB	; 251
     492:	20 93 08 05 	sts	0x0508, r18
            }
            
            if (writeToTerminal)
     496:	20 91 09 05 	lds	r18, 0x0509
     49a:	30 91 0a 05 	lds	r19, 0x050A
     49e:	23 2b       	or	r18, r19
     4a0:	89 f1       	breq	.+98     	; 0x504 <LineSensors_check_line+0x134>
     4a2:	4a e0       	ldi	r20, 0x0A	; 10
     4a4:	68 e5       	ldi	r22, 0x58	; 88
     4a6:	75 e0       	ldi	r23, 0x05	; 5
     4a8:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
            {
                itoa(adcResult, adc3, 10);
                uart_puts(adc3);
     4ac:	88 e5       	ldi	r24, 0x58	; 88
     4ae:	95 e0       	ldi	r25, 0x05	; 5
     4b0:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
                uart_puts("    ");
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	23 c0       	rjmp	.+70     	; 0x500 <LineSensors_check_line+0x130>
            }
            
            break;
            
        case 4:
            ADMUX = 0x40;
     4ba:	80 e4       	ldi	r24, 0x40	; 64
     4bc:	80 93 7c 00 	sts	0x007C, r24
            
            
            adcResult = convert();
     4c0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <convert>
            
            if (adcResult>SENSOR_4_THRESHOLD) {
     4c4:	83 3c       	cpi	r24, 0xC3	; 195
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	92 07       	cpc	r25, r18
     4ca:	20 f0       	brcs	.+8      	; 0x4d4 <LineSensors_check_line+0x104>
                binary |= 0x08;
     4cc:	20 91 08 05 	lds	r18, 0x0508
     4d0:	28 60       	ori	r18, 0x08	; 8
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <LineSensors_check_line+0x10a>
            } else {
                binary &= ~0x08;
     4d4:	20 91 08 05 	lds	r18, 0x0508
     4d8:	27 7f       	andi	r18, 0xF7	; 247
     4da:	20 93 08 05 	sts	0x0508, r18
            }
            
            if (writeToTerminal)
     4de:	20 91 09 05 	lds	r18, 0x0509
     4e2:	30 91 0a 05 	lds	r19, 0x050A
     4e6:	23 2b       	or	r18, r19
     4e8:	69 f0       	breq	.+26     	; 0x504 <LineSensors_check_line+0x134>
     4ea:	4a e0       	ldi	r20, 0x0A	; 10
     4ec:	64 e5       	ldi	r22, 0x54	; 84
     4ee:	75 e0       	ldi	r23, 0x05	; 5
     4f0:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
            {
                itoa(adcResult, adc4, 10);
                uart_puts(adc4);
     4f4:	84 e5       	ldi	r24, 0x54	; 84
     4f6:	95 e0       	ldi	r25, 0x05	; 5
     4f8:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
                uart_puts("\r\n");
     4fc:	8e ef       	ldi	r24, 0xFE	; 254
     4fe:	94 e0       	ldi	r25, 0x04	; 4
     500:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     504:	8c e5       	ldi	r24, 0x5C	; 92
     506:	8a 95       	dec	r24
     508:	f1 f7       	brne	.-4      	; 0x506 <LineSensors_check_line+0x136>
     50a:	00 00       	nop
     50c:	08 95       	ret

0000050e <LineSensors_check_all>:
    
}

void LineSensors_check_all(void)
{
    MCU_PORT |= (1<<MCU_PIN);   // Set mcu pin high
     50e:	46 9a       	sbi	0x08, 6	; 8
     510:	89 e9       	ldi	r24, 0x99	; 153
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <LineSensors_check_all+0x6>
     518:	00 c0       	rjmp	.+0      	; 0x51a <LineSensors_check_all+0xc>
    _delay_us(200);
    LineSensors_check_line(1);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LineSensors_check_line>
    LineSensors_check_line(2);
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LineSensors_check_line>
    LineSensors_check_line(3);
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LineSensors_check_line>
    LineSensors_check_line(4);
     532:	84 e0       	ldi	r24, 0x04	; 4
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LineSensors_check_line>
    //_delay_us(1000);
    MCU_PORT &= ~(1<<MCU_PIN);  // Set mcu pin low
     53a:	46 98       	cbi	0x08, 6	; 8
     53c:	08 95       	ret

0000053e <LineSensors_value>:
}


int LineSensors_value(void)
{
    return binary;
     53e:	80 91 08 05 	lds	r24, 0x0508
}
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	08 95       	ret

00000546 <motor_init>:
//int firstStop = 0;

void motor_init(void)
{
    // Encoder motor left A and B
    DDRE &= ~(1<<DDE6) & ~(1<<DDE7);
     546:	8d b1       	in	r24, 0x0d	; 13
     548:	8f 73       	andi	r24, 0x3F	; 63
     54a:	8d b9       	out	0x0d, r24	; 13
    
    // Encoder motor right A and B
    DDRE  &= ~(1<<DDE4) & ~(1<<DDE5);
     54c:	8d b1       	in	r24, 0x0d	; 13
     54e:	8f 7c       	andi	r24, 0xCF	; 207
     550:	8d b9       	out	0x0d, r24	; 13
    
    cli(); // disable global interrupts
     552:	f8 94       	cli
    
    EIFR |= (1<<INT7)|(1<<INT6)|(1<<INT5)|(1<<INT4);
     554:	8c b3       	in	r24, 0x1c	; 28
     556:	80 6f       	ori	r24, 0xF0	; 240
     558:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1<<INT7)|(1<<INT6)|(1<<INT5)|(1<<INT4);
     55a:	8d b3       	in	r24, 0x1d	; 29
     55c:	80 6f       	ori	r24, 0xF0	; 240
     55e:	8d bb       	out	0x1d, r24	; 29
    EICRB |= (1<<ISC70)|(1<<ISC60)|(1<<ISC50)|(1<<ISC40);
     560:	ea e6       	ldi	r30, 0x6A	; 106
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	85 65       	ori	r24, 0x55	; 85
     568:	80 83       	st	Z, r24
    //    EICRB |= (1<<ISC71)|(1<<ISC61)|(1<<ISC51)|(1<<ISC41);
    
    
    sei(); //Enable global interrupts. SREG = (1<<I);
     56a:	78 94       	sei
    
    // Motor input
    DDRC |= (1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3); // Outputs
     56c:	87 b1       	in	r24, 0x07	; 7
     56e:	8f 60       	ori	r24, 0x0F	; 15
     570:	87 b9       	out	0x07, r24	; 7
    
    PORTC |= (1<<PORTC0);   // High. Forward motor Left
     572:	40 9a       	sbi	0x08, 0	; 8
    PORTC &= ~(1<<PORTC1);  // Low Forward motor Left
     574:	41 98       	cbi	0x08, 1	; 8
    
    PORTC |= (1<<PORTC3);   // High. Forward motor Right
     576:	43 9a       	sbi	0x08, 3	; 8
    PORTC &= ~(1<<PORTC2);  // Low Forward motor Right
     578:	42 98       	cbi	0x08, 2	; 8
     57a:	08 95       	ret

0000057c <motor_timer_init>:
}

void motor_timer_init(void)
{
    // Timer 0 // adjust timer
    TCCR0A = (1<<WGM01);
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS02); // prescaler 256
     580:	94 e0       	ldi	r25, 0x04	; 4
     582:	95 bd       	out	0x25, r25	; 37
    OCR0A = 71;
     584:	97 e4       	ldi	r25, 0x47	; 71
     586:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
     588:	80 93 6e 00 	sts	0x006E, r24
    
    // Timer 1 // PWM
    TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(0<<WGM10)|(1<<WGM11);
     58c:	82 ea       	ldi	r24, 0xA2	; 162
     58e:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = (1<<CS10)|(0<<WGM12);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 81 00 	sts	0x0081, r24
    //ICR1 = 511;
    OCR1B = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	90 93 8b 00 	sts	0x008B, r25
     5a0:	80 93 8a 00 	sts	0x008A, r24
    OCR1A = 1;
     5a4:	90 93 89 00 	sts	0x0089, r25
     5a8:	80 93 88 00 	sts	0x0088, r24
    
    // PWM
    DDRB |= (1<<DDB5)|(1<<DDB6);    // Output PWM
     5ac:	84 b1       	in	r24, 0x04	; 4
     5ae:	80 66       	ori	r24, 0x60	; 96
     5b0:	84 b9       	out	0x04, r24	; 4
     5b2:	08 95       	ret

000005b4 <__vector_5>:
}


ISR(INT4_vect)
{
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
    encoderValueRight++;
     5c2:	80 91 18 05 	lds	r24, 0x0518
     5c6:	90 91 19 05 	lds	r25, 0x0519
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	90 93 19 05 	sts	0x0519, r25
     5d0:	80 93 18 05 	sts	0x0518, r24
    
    if (PINE & (1<<PE4)) {
     5d4:	64 9b       	sbis	0x0c, 4	; 12
     5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__vector_5+0x3e>
        
        if (!(PINE & (1<<PE5))) {
     5d8:	65 99       	sbic	0x0c, 5	; 12
     5da:	07 c0       	rjmp	.+14     	; 0x5ea <__vector_5+0x36>
            forwardsRight = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	90 93 0c 05 	sts	0x050C, r25
     5e4:	80 93 0b 05 	sts	0x050B, r24
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__vector_5+0x3e>
        } else {
            forwardsRight = 0;
     5ea:	10 92 0c 05 	sts	0x050C, r1
     5ee:	10 92 0b 05 	sts	0x050B, r1
        }
        
    }
    
}
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_6>:

ISR(INT5_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
    encoderValueRight++;
     60e:	80 91 18 05 	lds	r24, 0x0518
     612:	90 91 19 05 	lds	r25, 0x0519
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	90 93 19 05 	sts	0x0519, r25
     61c:	80 93 18 05 	sts	0x0518, r24
    
    if (PINE & (1<<PE5)) {
     620:	65 9b       	sbis	0x0c, 5	; 12
     622:	0d c0       	rjmp	.+26     	; 0x63e <__vector_6+0x3e>
        
        if (!(PINE & (1<<PE4))) {
     624:	64 99       	sbic	0x0c, 4	; 12
     626:	05 c0       	rjmp	.+10     	; 0x632 <__vector_6+0x32>
            forwardsRight = 0;
     628:	10 92 0c 05 	sts	0x050C, r1
     62c:	10 92 0b 05 	sts	0x050B, r1
     630:	06 c0       	rjmp	.+12     	; 0x63e <__vector_6+0x3e>
        } else {
            forwardsRight = 1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 0c 05 	sts	0x050C, r25
     63a:	80 93 0b 05 	sts	0x050B, r24
        }
    }
}
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_7>:

ISR(INT6_vect)
{
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
    encoderValueLeft++;
     65a:	80 91 16 05 	lds	r24, 0x0516
     65e:	90 91 17 05 	lds	r25, 0x0517
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	90 93 17 05 	sts	0x0517, r25
     668:	80 93 16 05 	sts	0x0516, r24
    
    
    if (PINE & (1<<PE6))
     66c:	66 9b       	sbis	0x0c, 6	; 12
     66e:	0d c0       	rjmp	.+26     	; 0x68a <__vector_7+0x3e>
    {
        
        if (!(PINE & (1<<PE7)))
     670:	67 99       	sbic	0x0c, 7	; 12
     672:	05 c0       	rjmp	.+10     	; 0x67e <__vector_7+0x32>
        {
            forwardsLeft = 0;
     674:	10 92 0e 05 	sts	0x050E, r1
     678:	10 92 0d 05 	sts	0x050D, r1
     67c:	06 c0       	rjmp	.+12     	; 0x68a <__vector_7+0x3e>
        }
        else
        {
            forwardsLeft = 1;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 0e 05 	sts	0x050E, r25
     686:	80 93 0d 05 	sts	0x050D, r24
        }
        
    }
}
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <__vector_8>:

ISR(INT7_vect)
{
     698:	1f 92       	push	r1
     69a:	0f 92       	push	r0
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	0f 92       	push	r0
     6a0:	11 24       	eor	r1, r1
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
    encoderValueLeft++;
     6a6:	80 91 16 05 	lds	r24, 0x0516
     6aa:	90 91 17 05 	lds	r25, 0x0517
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	90 93 17 05 	sts	0x0517, r25
     6b4:	80 93 16 05 	sts	0x0516, r24
    
    if (PINE & (1<<PE7)) {
     6b8:	67 9b       	sbis	0x0c, 7	; 12
     6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <__vector_8+0x3e>
        
        if (!(PINE & (1<<PE6))) {
     6bc:	66 99       	sbic	0x0c, 6	; 12
     6be:	07 c0       	rjmp	.+14     	; 0x6ce <__vector_8+0x36>
            forwardsLeft = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	90 93 0e 05 	sts	0x050E, r25
     6c8:	80 93 0d 05 	sts	0x050D, r24
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__vector_8+0x3e>
        } else {
            forwardsLeft = 0;
     6ce:	10 92 0e 05 	sts	0x050E, r1
     6d2:	10 92 0d 05 	sts	0x050D, r1
        }
    }
    
    
}
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_21>:



ISR(TIMER0_COMPA_vect) // Comes every 1ms
{
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
    volatile static uint16_t count10ms = INTERVAL_ADJUST_SPEED;
    time1ms++;
     6f2:	80 91 13 05 	lds	r24, 0x0513
     6f6:	90 91 14 05 	lds	r25, 0x0514
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	90 93 14 05 	sts	0x0514, r25
     700:	80 93 13 05 	sts	0x0513, r24
    
    if ((--count10ms) == 0)  // Do if 1 minus count10ms = 0
     704:	80 91 00 02 	lds	r24, 0x0200
     708:	90 91 01 02 	lds	r25, 0x0201
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	90 93 01 02 	sts	0x0201, r25
     712:	80 93 00 02 	sts	0x0200, r24
     716:	89 2b       	or	r24, r25
     718:	49 f4       	brne	.+18     	; 0x72c <__vector_21+0x48>
    {
        
        count10ms = INTERVAL_ADJUST_SPEED; //
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	90 93 01 02 	sts	0x0201, r25
     722:	80 93 00 02 	sts	0x0200, r24
        adjustSpeed = true;      // Set adjustSpeed to 1. Activating this function to be run next time
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 15 05 	sts	0x0515, r24
    }
}
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <forwardMotorLeft>:


void forwardMotorLeft(void)
{
    PORTC |= (1<<PORTC3); // High. Forward motor left
     73a:	43 9a       	sbi	0x08, 3	; 8
    PORTC &= ~(1<<PORTC2); // Low Forward motor left
     73c:	42 98       	cbi	0x08, 2	; 8
     73e:	08 95       	ret

00000740 <forwardMotorRight>:
}

void forwardMotorRight(void)
{
    PORTC |= (1<<PORTC0); // High. Forward motor right
     740:	40 9a       	sbi	0x08, 0	; 8
    PORTC &= ~(1<<PORTC1); // Low Forward motor right
     742:	41 98       	cbi	0x08, 1	; 8
     744:	08 95       	ret

00000746 <backwardsMotorLeft>:
}

void backwardsMotorLeft(void)
{
    PORTC |= (1<<PORTC2); // High backwards motor left
     746:	42 9a       	sbi	0x08, 2	; 8
    PORTC &= ~(1<<PORTC3); // Low backwards motor left
     748:	43 98       	cbi	0x08, 3	; 8
     74a:	08 95       	ret

0000074c <backwardsMotorRight>:
}

void backwardsMotorRight(void)
{
    PORTC |= (1<<PORTC1); // High backwards motor right
     74c:	41 9a       	sbi	0x08, 1	; 8
    PORTC &= ~(1<<PORTC0); // Low backwards motor right
     74e:	40 98       	cbi	0x08, 0	; 8
     750:	08 95       	ret

00000752 <drive>:
//                uart_puts("\r\n");
//    
    
    
    // Scaled speed reference
    speedReference = speed*PWM_FACTOR;
     752:	e7 e0       	ldi	r30, 0x07	; 7
     754:	e6 9f       	mul	r30, r22
     756:	90 01       	movw	r18, r0
     758:	e7 9f       	mul	r30, r23
     75a:	30 0d       	add	r19, r0
     75c:	11 24       	eor	r1, r1
     75e:	30 93 05 02 	sts	0x0205, r19
     762:	20 93 04 02 	sts	0x0204, r18
    
    // Scaled encoder values
    // Left motor
    unsigned int encoderValueLeftScaled = encoderValueLeft*PWM_FACTOR;
     766:	60 91 16 05 	lds	r22, 0x0516
     76a:	70 91 17 05 	lds	r23, 0x0517
     76e:	e6 9f       	mul	r30, r22
     770:	a0 01       	movw	r20, r0
     772:	e7 9f       	mul	r30, r23
     774:	50 0d       	add	r21, r0
     776:	11 24       	eor	r1, r1
    if (!forwardsLeft) {
     778:	60 91 0d 05 	lds	r22, 0x050D
     77c:	70 91 0e 05 	lds	r23, 0x050E
     780:	67 2b       	or	r22, r23
     782:	19 f4       	brne	.+6      	; 0x78a <drive+0x38>
        encoderValueLeftScaled = -(encoderValueLeftScaled);
     784:	51 95       	neg	r21
     786:	41 95       	neg	r20
     788:	51 09       	sbc	r21, r1
    }
    encoderValueLeft = 0;   // reset variable
     78a:	10 92 17 05 	sts	0x0517, r1
     78e:	10 92 16 05 	sts	0x0516, r1
    // Right motor
    unsigned int encoderValueRightScaled = encoderValueRight*PWM_FACTOR;
     792:	e0 91 18 05 	lds	r30, 0x0518
     796:	f0 91 19 05 	lds	r31, 0x0519
     79a:	a7 e0       	ldi	r26, 0x07	; 7
     79c:	ae 9f       	mul	r26, r30
     79e:	b0 01       	movw	r22, r0
     7a0:	af 9f       	mul	r26, r31
     7a2:	70 0d       	add	r23, r0
     7a4:	11 24       	eor	r1, r1
    if (!forwardsRight) {
     7a6:	e0 91 0b 05 	lds	r30, 0x050B
     7aa:	f0 91 0c 05 	lds	r31, 0x050C
     7ae:	ef 2b       	or	r30, r31
     7b0:	19 f4       	brne	.+6      	; 0x7b8 <drive+0x66>
        encoderValueRightScaled = -(encoderValueRightScaled);
     7b2:	71 95       	neg	r23
     7b4:	61 95       	neg	r22
     7b6:	71 09       	sbc	r23, r1
    }
    encoderValueRight = 0;   // reset variable
     7b8:	10 92 19 05 	sts	0x0519, r1
     7bc:	10 92 18 05 	sts	0x0518, r1
    //  int IValueTemp = (encoderValueRightScaled + (-encoderValueLeftScaled) +direction);
    
//    IValueTemp /= 2;    // split value, one for each motor
    IValueTemp *= K_I;    // split value, one for each motor
    
    IValue += IValueTemp;
     7c0:	e0 91 82 05 	lds	r30, 0x0582
     7c4:	f0 91 83 05 	lds	r31, 0x0583
//                    uart_puts("Encoder Right: ");
//                    uart_puts(temp8);
//                    uart_puts("\r\n");
//    
    
    int IValueTemp = (encoderValueRightScaled + (-encoderValueLeftScaled));
     7c8:	db 01       	movw	r26, r22
     7ca:	a4 1b       	sub	r26, r20
     7cc:	b5 0b       	sbc	r27, r21
    //  int IValueTemp = (encoderValueRightScaled + (-encoderValueLeftScaled) +direction);
    
//    IValueTemp /= 2;    // split value, one for each motor
    IValueTemp *= K_I;    // split value, one for each motor
    
    IValue += IValueTemp;
     7ce:	ea 0f       	add	r30, r26
     7d0:	fb 1f       	adc	r31, r27
     7d2:	f0 93 83 05 	sts	0x0583, r31
     7d6:	e0 93 82 05 	sts	0x0582, r30
    
    if (IValue > pwmMax)
     7da:	a0 91 82 05 	lds	r26, 0x0582
     7de:	b0 91 83 05 	lds	r27, 0x0583
     7e2:	e0 91 02 02 	lds	r30, 0x0202
     7e6:	f0 91 03 02 	lds	r31, 0x0203
     7ea:	ea 17       	cp	r30, r26
     7ec:	fb 07       	cpc	r31, r27
     7ee:	54 f0       	brlt	.+20     	; 0x804 <drive+0xb2>
    {
        IValue = pwmMax;
    }
    else if (IValue < -pwmMax)
     7f0:	a0 91 82 05 	lds	r26, 0x0582
     7f4:	b0 91 83 05 	lds	r27, 0x0583
     7f8:	f1 95       	neg	r31
     7fa:	e1 95       	neg	r30
     7fc:	f1 09       	sbc	r31, r1
     7fe:	ae 17       	cp	r26, r30
     800:	bf 07       	cpc	r27, r31
     802:	24 f4       	brge	.+8      	; 0x80c <drive+0xba>
    {
        IValue = -pwmMax;
     804:	f0 93 83 05 	sts	0x0583, r31
     808:	e0 93 82 05 	sts	0x0582, r30
    }
    
    if(outLeftSide)
     80c:	e0 91 20 05 	lds	r30, 0x0520
     810:	f0 91 21 05 	lds	r31, 0x0521
     814:	ef 2b       	or	r30, r31
     816:	71 f0       	breq	.+28     	; 0x834 <drive+0xe2>
    {
        // Turn hard right
        errorDiffRight = ((speedReference - encoderValueRightScaled) - (IValue)); // slowdown right motor
     818:	e0 91 82 05 	lds	r30, 0x0582
     81c:	f0 91 83 05 	lds	r31, 0x0583
     820:	c9 01       	movw	r24, r18
     822:	86 1b       	sub	r24, r22
     824:	97 0b       	sbc	r25, r23
     826:	8e 1b       	sub	r24, r30
     828:	9f 0b       	sbc	r25, r31
     82a:	90 93 69 05 	sts	0x0569, r25
     82e:	80 93 68 05 	sts	0x0568, r24
     832:	32 c0       	rjmp	.+100    	; 0x898 <drive+0x146>
        errorDiffLeft = ((speedReference - encoderValueLeftScaled)); // Keep speed left motor
    }
    else if(outRightSide)
     834:	e0 91 1e 05 	lds	r30, 0x051E
     838:	f0 91 1f 05 	lds	r31, 0x051F
     83c:	ef 2b       	or	r30, r31
     83e:	69 f0       	breq	.+26     	; 0x85a <drive+0x108>
    {
        // Turn hard left
        errorDiffLeft = ((speedReference - encoderValueLeftScaled) + (IValue)); // slowdown left motor
     840:	80 91 82 05 	lds	r24, 0x0582
     844:	90 91 83 05 	lds	r25, 0x0583
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	84 1b       	sub	r24, r20
     84e:	95 0b       	sbc	r25, r21
     850:	90 93 7d 05 	sts	0x057D, r25
     854:	80 93 7c 05 	sts	0x057C, r24
     858:	0c c0       	rjmp	.+24     	; 0x872 <drive+0x120>
        errorDiffRight = ((speedReference - encoderValueRightScaled)); // Keep speed right motor
    }
    else if(direction == 1) // Nudge left
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	91 05       	cpc	r25, r1
     85e:	81 f4       	brne	.+32     	; 0x880 <drive+0x12e>
    {
        errorDiffLeft = (0 - (encoderValueLeftScaled/2)); // stop left motor
     860:	56 95       	lsr	r21
     862:	47 95       	ror	r20
     864:	51 95       	neg	r21
     866:	41 95       	neg	r20
     868:	51 09       	sbc	r21, r1
     86a:	50 93 7d 05 	sts	0x057D, r21
     86e:	40 93 7c 05 	sts	0x057C, r20
        errorDiffRight = ((speedReference - encoderValueRightScaled)); // Keep speed right motor
     872:	26 1b       	sub	r18, r22
     874:	37 0b       	sbc	r19, r23
     876:	30 93 69 05 	sts	0x0569, r19
     87a:	20 93 68 05 	sts	0x0568, r18
     87e:	96 c0       	rjmp	.+300    	; 0x9ac <drive+0x25a>
    }
    else if(direction == 2) // Nudge right
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	91 05       	cpc	r25, r1
     884:	81 f4       	brne	.+32     	; 0x8a6 <drive+0x154>
    {
        errorDiffRight = (0 - (encoderValueRightScaled/2)); // stop right motor
     886:	76 95       	lsr	r23
     888:	67 95       	ror	r22
     88a:	71 95       	neg	r23
     88c:	61 95       	neg	r22
     88e:	71 09       	sbc	r23, r1
     890:	70 93 69 05 	sts	0x0569, r23
     894:	60 93 68 05 	sts	0x0568, r22
        errorDiffLeft = ((speedReference - encoderValueLeftScaled)); // Keep speed left motor
     898:	24 1b       	sub	r18, r20
     89a:	35 0b       	sbc	r19, r21
     89c:	30 93 7d 05 	sts	0x057D, r19
     8a0:	20 93 7c 05 	sts	0x057C, r18
     8a4:	83 c0       	rjmp	.+262    	; 0x9ac <drive+0x25a>
    }
    else if(direction == 3) // medium left
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	91 05       	cpc	r25, r1
     8aa:	e1 f2       	breq	.-72     	; 0x864 <drive+0x112>
    {
        errorDiffLeft = (0 - encoderValueLeftScaled); // stop left motor
        errorDiffRight = ((speedReference - encoderValueRightScaled)); // Keep speed right motor
    }
    else if(direction == 4) // medium right
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	91 05       	cpc	r25, r1
     8b0:	61 f3       	breq	.-40     	; 0x88a <drive+0x138>
    {
        errorDiffRight = (0 - encoderValueRightScaled); // stop right motor
        errorDiffLeft = ((speedReference - encoderValueLeftScaled)); // Keep speed left motor
    }
    else if(direction == 7)  // turn 90 degrees left
     8b2:	87 30       	cpi	r24, 0x07	; 7
     8b4:	91 05       	cpc	r25, r1
     8b6:	59 f4       	brne	.+22     	; 0x8ce <drive+0x17c>
    {
        errorDiffRight = (0); //((speedReference - encoderValueRightScaled));
     8b8:	10 92 69 05 	sts	0x0569, r1
     8bc:	10 92 68 05 	sts	0x0568, r1
        errorDiffLeft = -300;
     8c0:	84 ed       	ldi	r24, 0xD4	; 212
     8c2:	9e ef       	ldi	r25, 0xFE	; 254
     8c4:	90 93 7d 05 	sts	0x057D, r25
     8c8:	80 93 7c 05 	sts	0x057C, r24
     8cc:	56 c0       	rjmp	.+172    	; 0x97a <drive+0x228>
        
        backwardsMotorLeft();
    }
    else if(direction == 8) // turn 90 degrees right
     8ce:	88 30       	cpi	r24, 0x08	; 8
     8d0:	91 05       	cpc	r25, r1
     8d2:	39 f4       	brne	.+14     	; 0x8e2 <drive+0x190>
    {
        errorDiffLeft = 0; //((speedReference - encoderValueLeftScaled));
     8d4:	10 92 7d 05 	sts	0x057D, r1
     8d8:	10 92 7c 05 	sts	0x057C, r1
        errorDiffRight = -300;
     8dc:	84 ed       	ldi	r24, 0xD4	; 212
     8de:	9e ef       	ldi	r25, 0xFE	; 254
     8e0:	37 c0       	rjmp	.+110    	; 0x950 <drive+0x1fe>
        
        backwardsMotorRight();
    }
    else if(direction == 9) // turn left to line
     8e2:	89 30       	cpi	r24, 0x09	; 9
     8e4:	91 05       	cpc	r25, r1
     8e6:	49 f4       	brne	.+18     	; 0x8fa <drive+0x1a8>
    {
        errorDiffLeft = -150; //((speedReference - encoderValueLeftScaled));
     8e8:	8a e6       	ldi	r24, 0x6A	; 106
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	90 93 7d 05 	sts	0x057D, r25
     8f0:	80 93 7c 05 	sts	0x057C, r24
        errorDiffRight = 150;
     8f4:	86 e9       	ldi	r24, 0x96	; 150
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <drive+0x1be>
    }
    else if(direction == 10) // Turn right to line
     8fa:	8a 30       	cpi	r24, 0x0A	; 10
     8fc:	91 05       	cpc	r25, r1
     8fe:	69 f4       	brne	.+26     	; 0x91a <drive+0x1c8>
    {
        errorDiffLeft = 150; //((speedReference - encoderValueLeftScaled));
     900:	86 e9       	ldi	r24, 0x96	; 150
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 7d 05 	sts	0x057D, r25
     908:	80 93 7c 05 	sts	0x057C, r24
        errorDiffRight = -150;
     90c:	8a e6       	ldi	r24, 0x6A	; 106
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	90 93 69 05 	sts	0x0569, r25
     914:	80 93 68 05 	sts	0x0568, r24
     918:	49 c0       	rjmp	.+146    	; 0x9ac <drive+0x25a>
    }
    else if(direction == 11)  // circle left
     91a:	8b 30       	cpi	r24, 0x0B	; 11
     91c:	91 05       	cpc	r25, r1
     91e:	69 f4       	brne	.+26     	; 0x93a <drive+0x1e8>
    {

        errorDiffLeft = -15;
     920:	81 ef       	ldi	r24, 0xF1	; 241
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	90 93 7d 05 	sts	0x057D, r25
     928:	80 93 7c 05 	sts	0x057C, r24
        errorDiffRight = 600;
     92c:	88 e5       	ldi	r24, 0x58	; 88
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	90 93 69 05 	sts	0x0569, r25
     934:	80 93 68 05 	sts	0x0568, r24
     938:	20 c0       	rjmp	.+64     	; 0x97a <drive+0x228>
//        errorDiffLeft = ((0 - (encoderValueLeftScaled))/64); // little forward left motor
//        errorDiffRight = ((speedReference - encoderValueRightScaled)); // Keep speed right motor
        
        backwardsMotorLeft();
    }
    else if(direction == 12) // circle right
     93a:	8c 30       	cpi	r24, 0x0C	; 12
     93c:	91 05       	cpc	r25, r1
     93e:	79 f4       	brne	.+30     	; 0x95e <drive+0x20c>
    {
        errorDiffLeft = 600;
     940:	88 e5       	ldi	r24, 0x58	; 88
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	90 93 7d 05 	sts	0x057D, r25
     948:	80 93 7c 05 	sts	0x057C, r24
        errorDiffRight = -15;
     94c:	81 ef       	ldi	r24, 0xF1	; 241
     94e:	9f ef       	ldi	r25, 0xFF	; 255
     950:	90 93 69 05 	sts	0x0569, r25
     954:	80 93 68 05 	sts	0x0568, r24
//        errorDiffLeft = (speedReference - (encoderValueLeftScaled));
//        errorDiffRight = (0 - (encoderValueRightScaled/64));
        
        backwardsMotorRight();
     958:	0e 94 a6 03 	call	0x74c	; 0x74c <backwardsMotorRight>
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <drive+0x25a>
     95e:	f9 01       	movw	r30, r18
     960:	e6 1b       	sub	r30, r22
     962:	f7 0b       	sbc	r31, r23
     964:	bf 01       	movw	r22, r30
    }
    else if(direction == 13)  // soft left
     966:	0d 97       	sbiw	r24, 0x0d	; 13
     968:	59 f4       	brne	.+22     	; 0x980 <drive+0x22e>
    {
        errorDiffLeft = (0); // little forward left motor
     96a:	10 92 7d 05 	sts	0x057D, r1
     96e:	10 92 7c 05 	sts	0x057C, r1
        errorDiffRight = ((speedReference - encoderValueRightScaled)); // Keep speed right motor
     972:	f0 93 69 05 	sts	0x0569, r31
     976:	e0 93 68 05 	sts	0x0568, r30
        
        backwardsMotorLeft();
     97a:	0e 94 a3 03 	call	0x746	; 0x746 <backwardsMotorLeft>
     97e:	16 c0       	rjmp	.+44     	; 0x9ac <drive+0x25a>
    }
    else
    {
        errorDiffRight = ((speedReference - encoderValueRightScaled) - (IValue));   // drive straight
     980:	80 91 82 05 	lds	r24, 0x0582
     984:	90 91 83 05 	lds	r25, 0x0583
     988:	68 1b       	sub	r22, r24
     98a:	79 0b       	sbc	r23, r25
     98c:	70 93 69 05 	sts	0x0569, r23
     990:	60 93 68 05 	sts	0x0568, r22
        errorDiffLeft = ((speedReference - encoderValueLeftScaled) + (IValue));     // drive straight
     994:	80 91 82 05 	lds	r24, 0x0582
     998:	90 91 83 05 	lds	r25, 0x0583
     99c:	82 0f       	add	r24, r18
     99e:	93 1f       	adc	r25, r19
     9a0:	84 1b       	sub	r24, r20
     9a2:	95 0b       	sbc	r25, r21
     9a4:	90 93 7d 05 	sts	0x057D, r25
     9a8:	80 93 7c 05 	sts	0x057C, r24
    
    
    
    // P block
    
    if (!stopFlag) {
     9ac:	80 91 1a 05 	lds	r24, 0x051A
     9b0:	90 91 1b 05 	lds	r25, 0x051B
     9b4:	89 2b       	or	r24, r25
     9b6:	d1 f4       	brne	.+52     	; 0x9ec <drive+0x29a>
        errorDiffRight *= K_P; // Factor to be calculated
     9b8:	20 91 68 05 	lds	r18, 0x0568
     9bc:	30 91 69 05 	lds	r19, 0x0569
     9c0:	c9 01       	movw	r24, r18
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	90 93 69 05 	sts	0x0569, r25
     9ce:	80 93 68 05 	sts	0x0568, r24
        errorDiffLeft *= K_P;
     9d2:	20 91 7c 05 	lds	r18, 0x057C
     9d6:	30 91 7d 05 	lds	r19, 0x057D
     9da:	c9 01       	movw	r24, r18
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	90 93 7d 05 	sts	0x057D, r25
     9e8:	80 93 7c 05 	sts	0x057C, r24
    //    uart_puts(temp4);
    //    uart_puts("\r\n");
    //
    // PWM to motor right
    
    if (errorDiffRight > pwmMax)
     9ec:	20 91 68 05 	lds	r18, 0x0568
     9f0:	30 91 69 05 	lds	r19, 0x0569
     9f4:	80 91 02 02 	lds	r24, 0x0202
     9f8:	90 91 03 02 	lds	r25, 0x0203
     9fc:	82 17       	cp	r24, r18
     9fe:	93 07       	cpc	r25, r19
     a00:	2c f1       	brlt	.+74     	; 0xa4c <drive+0x2fa>
    {
        OCR1A = pwmMax;
        forwardMotorRight();
    }
    else if (errorDiffRight < -pwmMax)
     a02:	40 91 68 05 	lds	r20, 0x0568
     a06:	50 91 69 05 	lds	r21, 0x0569
     a0a:	22 27       	eor	r18, r18
     a0c:	33 27       	eor	r19, r19
     a0e:	28 1b       	sub	r18, r24
     a10:	39 0b       	sbc	r19, r25
     a12:	42 17       	cp	r20, r18
     a14:	53 07       	cpc	r21, r19
     a16:	7c f0       	brlt	.+30     	; 0xa36 <drive+0x2e4>
    {
        OCR1A = pwmMax;
        backwardsMotorRight();
    }
    else if (errorDiffRight < 0)
     a18:	80 91 68 05 	lds	r24, 0x0568
     a1c:	90 91 69 05 	lds	r25, 0x0569
     a20:	97 ff       	sbrs	r25, 7
     a22:	10 c0       	rjmp	.+32     	; 0xa44 <drive+0x2f2>
    {
        OCR1A = abs(errorDiffRight);
     a24:	80 91 68 05 	lds	r24, 0x0568
     a28:	90 91 69 05 	lds	r25, 0x0569
     a2c:	97 ff       	sbrs	r25, 7
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <drive+0x2e4>
     a30:	91 95       	neg	r25
     a32:	81 95       	neg	r24
     a34:	91 09       	sbc	r25, r1
     a36:	90 93 89 00 	sts	0x0089, r25
     a3a:	80 93 88 00 	sts	0x0088, r24
        backwardsMotorRight();
     a3e:	0e 94 a6 03 	call	0x74c	; 0x74c <backwardsMotorRight>
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <drive+0x306>
    }
    else
    {
        OCR1A = errorDiffRight;
     a44:	80 91 68 05 	lds	r24, 0x0568
     a48:	90 91 69 05 	lds	r25, 0x0569
     a4c:	90 93 89 00 	sts	0x0089, r25
     a50:	80 93 88 00 	sts	0x0088, r24
        forwardMotorRight();
     a54:	0e 94 a0 03 	call	0x740	; 0x740 <forwardMotorRight>
    }
    
    
    // PWM to motor left
    
    if (errorDiffLeft > pwmMax)
     a58:	20 91 7c 05 	lds	r18, 0x057C
     a5c:	30 91 7d 05 	lds	r19, 0x057D
     a60:	80 91 02 02 	lds	r24, 0x0202
     a64:	90 91 03 02 	lds	r25, 0x0203
     a68:	82 17       	cp	r24, r18
     a6a:	93 07       	cpc	r25, r19
     a6c:	2c f1       	brlt	.+74     	; 0xab8 <drive+0x366>
    {
        //        uart_puts("den er her 1\r\n");
        OCR1B = pwmMax;
        forwardMotorLeft();
    }
    else if (errorDiffLeft < -pwmMax)
     a6e:	40 91 7c 05 	lds	r20, 0x057C
     a72:	50 91 7d 05 	lds	r21, 0x057D
     a76:	22 27       	eor	r18, r18
     a78:	33 27       	eor	r19, r19
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	42 17       	cp	r20, r18
     a80:	53 07       	cpc	r21, r19
     a82:	7c f0       	brlt	.+30     	; 0xaa2 <drive+0x350>
        
        //        uart_puts("den er her 2\r\n");
        OCR1B = pwmMax;
        backwardsMotorLeft();
    }
    else if (errorDiffLeft < 0)
     a84:	80 91 7c 05 	lds	r24, 0x057C
     a88:	90 91 7d 05 	lds	r25, 0x057D
     a8c:	97 ff       	sbrs	r25, 7
     a8e:	10 c0       	rjmp	.+32     	; 0xab0 <drive+0x35e>
    {
        //        uart_puts("den er her 3\r\n");
        OCR1B = abs(errorDiffLeft);
     a90:	80 91 7c 05 	lds	r24, 0x057C
     a94:	90 91 7d 05 	lds	r25, 0x057D
     a98:	97 ff       	sbrs	r25, 7
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <drive+0x350>
     a9c:	91 95       	neg	r25
     a9e:	81 95       	neg	r24
     aa0:	91 09       	sbc	r25, r1
     aa2:	90 93 8b 00 	sts	0x008B, r25
     aa6:	80 93 8a 00 	sts	0x008A, r24
        backwardsMotorLeft();
     aaa:	0e 94 a3 03 	call	0x746	; 0x746 <backwardsMotorLeft>
     aae:	0a c0       	rjmp	.+20     	; 0xac4 <drive+0x372>
    }
    else
    {
        
        //        uart_puts("den er her 4\r\n");
        OCR1B = errorDiffLeft;
     ab0:	80 91 7c 05 	lds	r24, 0x057C
     ab4:	90 91 7d 05 	lds	r25, 0x057D
     ab8:	90 93 8b 00 	sts	0x008B, r25
     abc:	80 93 8a 00 	sts	0x008A, r24
        forwardMotorLeft();
     ac0:	0e 94 9d 03 	call	0x73a	; 0x73a <forwardMotorLeft>
    
   
   
    
    // STOP
    if (stopFlag == 1)
     ac4:	80 91 1a 05 	lds	r24, 0x051A
     ac8:	90 91 1b 05 	lds	r25, 0x051B
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	21 f5       	brne	.+72     	; 0xb18 <drive+0x3c6>
    {
        if (errorDiffLeft > -70 && errorDiffLeft < 70)
     ad0:	80 91 7c 05 	lds	r24, 0x057C
     ad4:	90 91 7d 05 	lds	r25, 0x057D
     ad8:	8b 3b       	cpi	r24, 0xBB	; 187
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	5c f0       	brlt	.+22     	; 0xaf4 <drive+0x3a2>
     ade:	80 91 7c 05 	lds	r24, 0x057C
     ae2:	90 91 7d 05 	lds	r25, 0x057D
     ae6:	86 34       	cpi	r24, 0x46	; 70
     ae8:	91 05       	cpc	r25, r1
     aea:	24 f4       	brge	.+8      	; 0xaf4 <drive+0x3a2>
        {
            OCR1B = 0;
     aec:	10 92 8b 00 	sts	0x008B, r1
     af0:	10 92 8a 00 	sts	0x008A, r1
        }
        
        if (errorDiffRight > -70 && errorDiffRight < 70) {
     af4:	80 91 68 05 	lds	r24, 0x0568
     af8:	90 91 69 05 	lds	r25, 0x0569
     afc:	8b 3b       	cpi	r24, 0xBB	; 187
     afe:	9f 4f       	sbci	r25, 0xFF	; 255
     b00:	5c f0       	brlt	.+22     	; 0xb18 <drive+0x3c6>
     b02:	80 91 68 05 	lds	r24, 0x0568
     b06:	90 91 69 05 	lds	r25, 0x0569
     b0a:	86 34       	cpi	r24, 0x46	; 70
     b0c:	91 05       	cpc	r25, r1
     b0e:	24 f4       	brge	.+8      	; 0xb18 <drive+0x3c6>
            OCR1A = 0;
     b10:	10 92 89 00 	sts	0x0089, r1
     b14:	10 92 88 00 	sts	0x0088, r1
     b18:	08 95       	ret

00000b1a <stop>:
//            uart_puts(temp2);
//            uart_puts("\r\n");
}
void stop(void)
{
    stopFlag = 1;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 1b 05 	sts	0x051B, r25
     b22:	80 93 1a 05 	sts	0x051A, r24
    while(encoderValueLeft != 0 && encoderValueRight != 0)
     b26:	20 91 16 05 	lds	r18, 0x0516
     b2a:	30 91 17 05 	lds	r19, 0x0517
     b2e:	80 91 18 05 	lds	r24, 0x0518
     b32:	90 91 19 05 	lds	r25, 0x0519
     b36:	21 15       	cp	r18, r1
     b38:	31 05       	cpc	r19, r1
     b3a:	79 f0       	breq	.+30     	; 0xb5a <stop+0x40>
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	69 f0       	breq	.+26     	; 0xb5a <stop+0x40>
    {
        if (adjustSpeed)
     b40:	40 91 15 05 	lds	r20, 0x0515
     b44:	44 23       	and	r20, r20
     b46:	b9 f3       	breq	.-18     	; 0xb36 <stop+0x1c>
        {
            adjustSpeed = false;
     b48:	10 92 15 05 	sts	0x0515, r1
            drive(0,0);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
     b58:	e6 cf       	rjmp	.-52     	; 0xb26 <stop+0xc>
        }
    }
    stopFlag = 0;
     b5a:	10 92 1b 05 	sts	0x051B, r1
     b5e:	10 92 1a 05 	sts	0x051A, r1
     b62:	08 95       	ret

00000b64 <init_uart>:
#include "UART.h"

void init_uart(uint32_t baudrate)
{
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
    uint16_t UBRR_val = ((F_CPU/16)/(baudrate))-1;
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	74 e9       	ldi	r23, 0x94	; 148
     b6c:	81 e1       	ldi	r24, 0x11	; 17
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 b2 10 	call	0x2164	; 0x2164 <__udivmodsi4>
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	31 09       	sbc	r19, r1
	UBRR0H = UBRR_val >> 8;
     b78:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = UBRR_val;
     b7c:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
     b80:	e1 ec       	ldi	r30, 0xC1	; 193
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 69       	ori	r24, 0x98	; 152
     b88:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
     b8a:	e2 ec       	ldi	r30, 0xC2	; 194
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 60       	ori	r24, 0x0E	; 14
     b92:	80 83       	st	Z, r24
     b94:	08 95       	ret

00000b96 <uart_putc>:
}

void uart_putc(unsigned char c)
{
	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
     b96:	90 91 c0 00 	lds	r25, 0x00C0
     b9a:	95 ff       	sbrs	r25, 5
     b9c:	fc cf       	rjmp	.-8      	; 0xb96 <uart_putc>
	UDR0 = c; // output character saved in c
     b9e:	80 93 c6 00 	sts	0x00C6, r24
     ba2:	08 95       	ret

00000ba4 <uart_puts>:
}

void uart_puts(char *s)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
	while(*s)
     baa:	89 91       	ld	r24, Y+
     bac:	88 23       	and	r24, r24
     bae:	19 f0       	breq	.+6      	; 0xbb6 <uart_puts+0x12>
	{
		uart_putc(*s);
     bb0:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
     bb4:	fa cf       	rjmp	.-12     	; 0xbaa <uart_puts+0x6>
		s++;
	}
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <init_uart1>:
#include "UART1.h"

void init_uart1(uint32_t baudrate)
{
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
    uint16_t UBRR_val = ((F_CPU/16)/(baudrate))-1;
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	74 e9       	ldi	r23, 0x94	; 148
     bc4:	81 e1       	ldi	r24, 0x11	; 17
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 b2 10 	call	0x2164	; 0x2164 <__udivmodsi4>
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	31 09       	sbc	r19, r1
    UBRR1H = UBRR_val >> 8;
     bd0:	30 93 cd 00 	sts	0x00CD, r19
    UBRR1L = UBRR_val;
     bd4:	20 93 cc 00 	sts	0x00CC, r18
    UCSR1B |= (1<<TXEN1) | (1<<RXEN1); // UART TX (Transmit - senden) einschalten
     bd8:	e9 ec       	ldi	r30, 0xC9	; 201
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	88 61       	ori	r24, 0x18	; 24
     be0:	80 83       	st	Z, r24
    UCSR1C |= (1<<USBS1) | (3<<UCSZ10); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
     be2:	ea ec       	ldi	r30, 0xCA	; 202
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8e 60       	ori	r24, 0x0E	; 14
     bea:	80 83       	st	Z, r24
     bec:	08 95       	ret

00000bee <uart1_putc>:
}

void uart1_putc(unsigned char c)
{
    while(!(UCSR1A & (1<<UDRE1))); // wait until sending is possible
     bee:	90 91 c8 00 	lds	r25, 0x00C8
     bf2:	95 ff       	sbrs	r25, 5
     bf4:	fc cf       	rjmp	.-8      	; 0xbee <uart1_putc>
    UDR1 = c; // output character saved in c
     bf6:	80 93 ce 00 	sts	0x00CE, r24
     bfa:	08 95       	ret

00000bfc <uart1_puts>:
}

void uart1_puts(char *s)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
    while(*s)
     c02:	89 91       	ld	r24, Y+
     c04:	88 23       	and	r24, r24
     c06:	19 f0       	breq	.+6      	; 0xc0e <uart1_puts+0x12>
    {
        uart1_putc(*s);
     c08:	0e 94 f7 05 	call	0xbee	; 0xbee <uart1_putc>
     c0c:	fa cf       	rjmp	.-12     	; 0xc02 <uart1_puts+0x6>
        s++;
    }
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <lineStateMachine>:
volatile int countNoLine = 0;

void lineStateMachine(int newLine, int prevLine)
{
    
    switch (newLine) {
     c14:	80 31       	cpi	r24, 0x10	; 16
     c16:	91 05       	cpc	r25, r1
     c18:	08 f0       	brcs	.+2      	; 0xc1c <lineStateMachine+0x8>
     c1a:	0f c1       	rjmp	.+542    	; 0xe3a <lineStateMachine+0x226>
     c1c:	fc 01       	movw	r30, r24
     c1e:	ea 59       	subi	r30, 0x9A	; 154
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__tablejump2__>
        case 0:
            countNoLine++;
     c26:	80 91 1c 05 	lds	r24, 0x051C
     c2a:	90 91 1d 05 	lds	r25, 0x051D
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	90 93 1d 05 	sts	0x051D, r25
     c34:	80 93 1c 05 	sts	0x051C, r24
            
            if (prevLine == 1 || outRightSide == 1) {
     c38:	61 30       	cpi	r22, 0x01	; 1
     c3a:	71 05       	cpc	r23, r1
     c3c:	31 f0       	breq	.+12     	; 0xc4a <lineStateMachine+0x36>
     c3e:	80 91 1e 05 	lds	r24, 0x051E
     c42:	90 91 1f 05 	lds	r25, 0x051F
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	59 f4       	brne	.+22     	; 0xc60 <lineStateMachine+0x4c>
                outRightSide = 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 1f 05 	sts	0x051F, r25
     c52:	80 93 1e 05 	sts	0x051E, r24
                drive(MEDIUM_LEFT, 10);
     c56:	6a e0       	ldi	r22, 0x0A	; 10
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <lineStateMachine+0x74>
                
            } else if (prevLine == 8 || outLeftSide == 1) {
     c60:	68 30       	cpi	r22, 0x08	; 8
     c62:	71 05       	cpc	r23, r1
     c64:	39 f0       	breq	.+14     	; 0xc74 <lineStateMachine+0x60>
     c66:	80 91 20 05 	lds	r24, 0x0520
     c6a:	90 91 21 05 	lds	r25, 0x0521
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	09 f0       	breq	.+2      	; 0xc74 <lineStateMachine+0x60>
     c72:	4f c0       	rjmp	.+158    	; 0xd12 <lineStateMachine+0xfe>
                outLeftSide = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	90 93 21 05 	sts	0x0521, r25
     c7c:	80 93 20 05 	sts	0x0520, r24
                drive(MEDIUM_RIGHT, 10);
     c80:	6a e0       	ldi	r22, 0x0A	; 10
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
     c8c:	42 c0       	rjmp	.+132    	; 0xd12 <lineStateMachine+0xfe>
           
            drive(FORWARD, speed);
            break;
            
        case 1:                                 //  1 0 0 0
            countNoLine = 0;
     c8e:	10 92 1d 05 	sts	0x051D, r1
     c92:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     c96:	10 92 21 05 	sts	0x0521, r1
     c9a:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     c9e:	10 92 1f 05 	sts	0x051F, r1
     ca2:	10 92 1e 05 	sts	0x051E, r1
            
            drive(MEDIUM_LEFT, speed);
     ca6:	60 91 06 02 	lds	r22, 0x0206
     caa:	70 91 07 02 	lds	r23, 0x0207
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0c 94 a9 03 	jmp	0x752	; 0x752 <drive>
            
            drive(NUDGE_LEFT, speed);
            break;
            
        case 3:                                 //  1 1 0 0
            countNoLine = 0;
     cb6:	10 92 1d 05 	sts	0x051D, r1
     cba:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     cbe:	10 92 21 05 	sts	0x0521, r1
     cc2:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     cc6:	10 92 1f 05 	sts	0x051F, r1
     cca:	10 92 1e 05 	sts	0x051E, r1
            
            drive(NUDGE_LEFT, speed);
     cce:	60 91 06 02 	lds	r22, 0x0206
     cd2:	70 91 07 02 	lds	r23, 0x0207
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	eb cf       	rjmp	.-42     	; 0xcb2 <lineStateMachine+0x9e>
            
            drive(NUDGE_RIGHT, speed);
            break;
            
        case 5:                                 //  1 0 1 0
            countNoLine = 0;
     cdc:	10 92 1d 05 	sts	0x051D, r1
     ce0:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     ce4:	10 92 21 05 	sts	0x0521, r1
     ce8:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     cec:	10 92 1f 05 	sts	0x051F, r1
     cf0:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 5: Sensor 1 and 3");
     cf4:	6d e0       	ldi	r22, 0x0D	; 13
     cf6:	72 e0       	ldi	r23, 0x02	; 2
     cf8:	a2 c0       	rjmp	.+324    	; 0xe3e <lineStateMachine+0x22a>
            break;
            
        case 6:                                 //  0 1 1 0
            countNoLine = 0;
     cfa:	10 92 1d 05 	sts	0x051D, r1
     cfe:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     d02:	10 92 21 05 	sts	0x0521, r1
     d06:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     d0a:	10 92 1f 05 	sts	0x051F, r1
     d0e:	10 92 1e 05 	sts	0x051E, r1
            
            drive(FORWARD, speed);
     d12:	60 91 06 02 	lds	r22, 0x0206
     d16:	70 91 07 02 	lds	r23, 0x0207
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	c9 cf       	rjmp	.-110    	; 0xcb2 <lineStateMachine+0x9e>
            break;
            
        case 7:                                 //  1 1 1 0
            countNoLine = 0;
     d20:	10 92 1d 05 	sts	0x051D, r1
     d24:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     d28:	10 92 21 05 	sts	0x0521, r1
     d2c:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     d30:	10 92 1f 05 	sts	0x051F, r1
     d34:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 7: Sensor 1, 2 and 4");
     d38:	64 e2       	ldi	r22, 0x24	; 36
     d3a:	72 e0       	ldi	r23, 0x02	; 2
     d3c:	80 c0       	rjmp	.+256    	; 0xe3e <lineStateMachine+0x22a>

            break;
            
        case 8:                                 //  0 0 0 1
            countNoLine = 0;
     d3e:	10 92 1d 05 	sts	0x051D, r1
     d42:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     d46:	10 92 21 05 	sts	0x0521, r1
     d4a:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     d4e:	10 92 1f 05 	sts	0x051F, r1
     d52:	10 92 1e 05 	sts	0x051E, r1
            
            drive(MEDIUM_RIGHT, speed);
     d56:	60 91 06 02 	lds	r22, 0x0206
     d5a:	70 91 07 02 	lds	r23, 0x0207
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a7 cf       	rjmp	.-178    	; 0xcb2 <lineStateMachine+0x9e>
            break;
            
        case 9:                                 //  1 0 0 1
            countNoLine = 0;
     d64:	10 92 1d 05 	sts	0x051D, r1
     d68:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     d6c:	10 92 21 05 	sts	0x0521, r1
     d70:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     d74:	10 92 1f 05 	sts	0x051F, r1
     d78:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 9: Sensor 1 and 4");
     d7c:	6e e3       	ldi	r22, 0x3E	; 62
     d7e:	72 e0       	ldi	r23, 0x02	; 2
     d80:	5e c0       	rjmp	.+188    	; 0xe3e <lineStateMachine+0x22a>

            break;
            
        case 10:                                 //  0 1 0 1
            countNoLine = 0;
     d82:	10 92 1d 05 	sts	0x051D, r1
     d86:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     d8a:	10 92 21 05 	sts	0x0521, r1
     d8e:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     d92:	10 92 1f 05 	sts	0x051F, r1
     d96:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 10: Sensor 2 and 4");
     d9a:	65 e5       	ldi	r22, 0x55	; 85
     d9c:	72 e0       	ldi	r23, 0x02	; 2
     d9e:	4f c0       	rjmp	.+158    	; 0xe3e <lineStateMachine+0x22a>

            break;
            
        case 11:                                 //  1 1 0 1
            countNoLine = 0;
     da0:	10 92 1d 05 	sts	0x051D, r1
     da4:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     da8:	10 92 21 05 	sts	0x0521, r1
     dac:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     db0:	10 92 1f 05 	sts	0x051F, r1
     db4:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 11: Sensor 1, 2 and 4");
     db8:	6d e6       	ldi	r22, 0x6D	; 109
     dba:	72 e0       	ldi	r23, 0x02	; 2
     dbc:	40 c0       	rjmp	.+128    	; 0xe3e <lineStateMachine+0x22a>

            break;
            
        case 12:                                 //  0 0 1 1
            countNoLine = 0;
     dbe:	10 92 1d 05 	sts	0x051D, r1
     dc2:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     dc6:	10 92 21 05 	sts	0x0521, r1
     dca:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     dce:	10 92 1f 05 	sts	0x051F, r1
     dd2:	10 92 1e 05 	sts	0x051E, r1
            
            drive(NUDGE_RIGHT, speed);
     dd6:	60 91 06 02 	lds	r22, 0x0206
     dda:	70 91 07 02 	lds	r23, 0x0207
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	67 cf       	rjmp	.-306    	; 0xcb2 <lineStateMachine+0x9e>
            break;
            
        case 13:                                 //  1 0 1 1
            countNoLine = 0;
     de4:	10 92 1d 05 	sts	0x051D, r1
     de8:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     dec:	10 92 21 05 	sts	0x0521, r1
     df0:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     df4:	10 92 1f 05 	sts	0x051F, r1
     df8:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 13: Sensor 1, 3 and 4");
     dfc:	68 e8       	ldi	r22, 0x88	; 136
     dfe:	72 e0       	ldi	r23, 0x02	; 2
     e00:	1e c0       	rjmp	.+60     	; 0xe3e <lineStateMachine+0x22a>

            break;
            
        case 14:                                 //  0 1 1 1
            countNoLine = 0;
     e02:	10 92 1d 05 	sts	0x051D, r1
     e06:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     e0a:	10 92 21 05 	sts	0x0521, r1
     e0e:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     e12:	10 92 1f 05 	sts	0x051F, r1
     e16:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            sendUartToInterface('H', "Case 14: Sensor 2, 3 and 4");
     e1a:	63 ea       	ldi	r22, 0xA3	; 163
     e1c:	72 e0       	ldi	r23, 0x02	; 2
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <lineStateMachine+0x22a>

            break;
            
        case 15:                                 //  1 1 1 1
            countNoLine = 0;
     e20:	10 92 1d 05 	sts	0x051D, r1
     e24:	10 92 1c 05 	sts	0x051C, r1
            outLeftSide = 0;
     e28:	10 92 21 05 	sts	0x0521, r1
     e2c:	10 92 20 05 	sts	0x0520, r1
            outRightSide = 0;
     e30:	10 92 1f 05 	sts	0x051F, r1
     e34:	10 92 1e 05 	sts	0x051E, r1
            
            //stop();
            break;
     e38:	08 95       	ret
            
            
        default:
            sendUartToInterface('H', "HUH?!");
     e3a:	6e eb       	ldi	r22, 0xBE	; 190
     e3c:	72 e0       	ldi	r23, 0x02	; 2
     e3e:	88 e4       	ldi	r24, 0x48	; 72
     e40:	0c 94 17 08 	jmp	0x102e	; 0x102e <sendUartToInterface>

00000e44 <getCountNoLine>:
    }
}

int getCountNoLine(void)
{
    return countNoLine;
     e44:	80 91 1c 05 	lds	r24, 0x051C
     e48:	90 91 1d 05 	lds	r25, 0x051D
}
     e4c:	08 95       	ret

00000e4e <init>:
 * Function to initialize drivers
 *
 **************************************************/
void init(void){
    // Initializations:
    HCSR04_init();
     e4e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <HCSR04_init>
    init_uart(115200);//57600
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	72 ec       	ldi	r23, 0xC2	; 194
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 b2 05 	call	0xb64	; 0xb64 <init_uart>
    init_ADC();
     e5e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init_ADC>
    init_uart1(9600);
     e62:	60 e8       	ldi	r22, 0x80	; 128
     e64:	75 e2       	ldi	r23, 0x25	; 37
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 de 05 	call	0xbbc	; 0xbbc <init_uart1>
    LineSensors_init();
     e6e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LineSensors_init>
    // Motor
    motor_init();
     e72:	0e 94 a3 02 	call	0x546	; 0x546 <motor_init>
    motor_timer_init();
     e76:	0e 94 be 02 	call	0x57c	; 0x57c <motor_timer_init>
    
    // Reset Atmega328p
    DDRD |= (1<<PD4);
     e7a:	54 9a       	sbi	0x0a, 4	; 10
    PORTD &= ~(1<<PD4);
     e7c:	5c 98       	cbi	0x0b, 4	; 11
     e7e:	8f e1       	ldi	r24, 0x1F	; 31
     e80:	8a 95       	dec	r24
     e82:	f1 f7       	brne	.-4      	; 0xe80 <init+0x32>
    _delay_us(5);
    PORTD |= (1<<PD4);
     e84:	5c 9a       	sbi	0x0b, 4	; 11
     e86:	08 95       	ret

00000e88 <rxData>:
}

char RX0_array[60]; //Used when data from PC is received
char temp[1];
void rxData(void) //Used, when data is received from PC
{
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	1f 92       	push	r1
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
    char cmd[1];
    //char data[60];
    static int i = 0;
    
    RX0_array[i] = UDR0;
     e92:	80 91 26 05 	lds	r24, 0x0526
     e96:	90 91 27 05 	lds	r25, 0x0527
     e9a:	20 91 c6 00 	lds	r18, 0x00C6
     e9e:	fc 01       	movw	r30, r24
     ea0:	e4 56       	subi	r30, 0x64	; 100
     ea2:	fa 4f       	sbci	r31, 0xFA	; 250
     ea4:	20 83       	st	Z, r18
    
    if (RX0_array[i++] == '\n') //13 = Carriage return
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	90 93 27 05 	sts	0x0527, r25
     eac:	80 93 26 05 	sts	0x0526, r24
     eb0:	2a 30       	cpi	r18, 0x0A	; 10
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <rxData+0x2e>
     eb4:	42 c0       	rjmp	.+132    	; 0xf3a <rxData+0xb2>
    {
        RX0_array[i-1] = '\0'; //received data is null-terminated
     eb6:	10 82       	st	Z, r1
        
        strncpy(cmd, RX0_array, 1);
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	6c e9       	ldi	r22, 0x9C	; 156
     ebe:	75 e0       	ldi	r23, 0x05	; 5
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <strncpy>

        switch (cmd[0]) {
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	85 34       	cpi	r24, 0x45	; 69
     ecc:	29 f1       	breq	.+74     	; 0xf18 <rxData+0x90>
     ece:	86 34       	cpi	r24, 0x46	; 70
     ed0:	b9 f0       	breq	.+46     	; 0xf00 <rxData+0x78>
     ed2:	81 34       	cpi	r24, 0x41	; 65
     ed4:	71 f5       	brne	.+92     	; 0xf32 <rxData+0xaa>
                startFlag = 0;
                stop();
                break;
                
            case 'A':
                sendUartToInterface('H', "Reset");
     ed6:	64 ed       	ldi	r22, 0xD4	; 212
     ed8:	72 e0       	ldi	r23, 0x02	; 2
     eda:	88 e4       	ldi	r24, 0x48	; 72
     edc:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                startFlag = 0;
     ee0:	10 92 23 05 	sts	0x0523, r1
     ee4:	10 92 22 05 	sts	0x0522, r1
                soft_reset();
     ee8:	28 e0       	ldi	r18, 0x08	; 8
     eea:	88 e1       	ldi	r24, 0x18	; 24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	a8 95       	wdr
     ef4:	80 93 60 00 	sts	0x0060, r24
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	20 93 60 00 	sts	0x0060, r18
     efe:	18 c0       	rjmp	.+48     	; 0xf30 <rxData+0xa8>
        
        strncpy(cmd, RX0_array, 1);

        switch (cmd[0]) {
            case 'F':
                sendUartToInterface('H', "Started");
     f00:	64 ec       	ldi	r22, 0xC4	; 196
     f02:	72 e0       	ldi	r23, 0x02	; 2
     f04:	88 e4       	ldi	r24, 0x48	; 72
     f06:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                startFlag = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 23 05 	sts	0x0523, r25
     f12:	80 93 22 05 	sts	0x0522, r24
                break;
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <rxData+0xaa>
                
            case 'E':
                sendUartToInterface('H', "Stopped");
     f18:	6c ec       	ldi	r22, 0xCC	; 204
     f1a:	72 e0       	ldi	r23, 0x02	; 2
     f1c:	88 e4       	ldi	r24, 0x48	; 72
     f1e:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                startFlag = 0;
     f22:	10 92 23 05 	sts	0x0523, r1
     f26:	10 92 22 05 	sts	0x0522, r1
                stop();
     f2a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <stop>
                break;
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <rxData+0xaa>
     f30:	ff cf       	rjmp	.-2      	; 0xf30 <rxData+0xa8>
                
            default:
                break;
        }
        
        i = 0;
     f32:	10 92 27 05 	sts	0x0527, r1
     f36:	10 92 26 05 	sts	0x0526, r1
    }
}
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <__vector_25>:


ISR(USART0_RX_vect) //When data is received from PC
{
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	0b b6       	in	r0, 0x3b	; 59
     f4e:	0f 92       	push	r0
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
    rxData();
     f68:	0e 94 44 07 	call	0xe88	; 0xe88 <rxData>
}
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0b be       	out	0x3b, r0	; 59
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <__vector_36>:

char RX1data[20];
char buffer[20];
static int i = 0;
ISR(USART1_RX_vect)
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	0b b6       	in	r0, 0x3b	; 59
     f9e:	0f 92       	push	r0
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31

    while (!(UCSR1A & (1 << RXC1)));
     fb8:	80 91 c8 00 	lds	r24, 0x00C8
     fbc:	87 ff       	sbrs	r24, 7
     fbe:	fc cf       	rjmp	.-8      	; 0xfb8 <__vector_36+0x26>
    
    
    RX1data[i] = UDR1;
     fc0:	80 91 28 05 	lds	r24, 0x0528
     fc4:	90 91 29 05 	lds	r25, 0x0529
     fc8:	20 91 ce 00 	lds	r18, 0x00CE
     fcc:	fc 01       	movw	r30, r24
     fce:	e8 57       	subi	r30, 0x78	; 120
     fd0:	fa 4f       	sbci	r31, 0xFA	; 250
     fd2:	20 83       	st	Z, r18
    
//    uart_puts(RX1data);
//    uart_puts("\r\n");
    
    if (RX1data[i++] == 'x')
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	90 93 29 05 	sts	0x0529, r25
     fda:	80 93 28 05 	sts	0x0528, r24
     fde:	28 37       	cpi	r18, 0x78	; 120
     fe0:	99 f4       	brne	.+38     	; 0x1008 <__vector_36+0x76>
    {
        direction = atoi(RX1data);
     fe2:	88 e8       	ldi	r24, 0x88	; 136
     fe4:	95 e0       	ldi	r25, 0x05	; 5
     fe6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <atoi>
     fea:	90 93 25 05 	sts	0x0525, r25
     fee:	80 93 24 05 	sts	0x0524, r24
        
        memset(RX1data, '\0', sizeof(RX1data));
     ff2:	84 e1       	ldi	r24, 0x14	; 20
     ff4:	e8 e8       	ldi	r30, 0x88	; 136
     ff6:	f5 e0       	ldi	r31, 0x05	; 5
     ff8:	df 01       	movw	r26, r30
     ffa:	1d 92       	st	X+, r1
     ffc:	8a 95       	dec	r24
     ffe:	e9 f7       	brne	.-6      	; 0xffa <__vector_36+0x68>
        
        i = 0;
    1000:	10 92 29 05 	sts	0x0529, r1
    1004:	10 92 28 05 	sts	0x0528, r1

    }
        

}
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0b be       	out	0x3b, r0	; 59
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <sendUartToInterface>:
 * @param command
 * @param message
 *
 **************************************************/
void sendUartToInterface(char command, char *message)
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	eb 01       	movw	r28, r22
    uart_putc(command);
    1034:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
    uart_puts(message);
    1038:	ce 01       	movw	r24, r28
    103a:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
    uart_puts("\r\n");
    103e:	8e ef       	ldi	r24, 0xFE	; 254
    1040:	94 e0       	ldi	r25, 0x04	; 4
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
 **************************************************/
void sendUartToInterface(char command, char *message)
{
    uart_putc(command);
    uart_puts(message);
    uart_puts("\r\n");
    1046:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <uart_puts>

0000104a <sendDistanceToInterface>:
 * Function to send Linesensor value to PC interface
 *
 **************************************************/
void sendDistanceToInterface(int sensor)
{
    if (sensor == 0)
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	91 f5       	brne	.+100    	; 0x10b2 <sendDistanceToInterface+0x68>
    {
        newDistanceFront = HCSR04_get_distance_cm(sensor);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 4d 01 	call	0x29a	; 0x29a <HCSR04_get_distance_cm>
    1056:	90 93 45 05 	sts	0x0545, r25
    105a:	80 93 44 05 	sts	0x0544, r24

        frontDistance = newDistanceFront;
    105e:	80 91 44 05 	lds	r24, 0x0544
    1062:	90 91 45 05 	lds	r25, 0x0545
    1066:	90 93 43 05 	sts	0x0543, r25
    106a:	80 93 42 05 	sts	0x0542, r24
        
        if (frontDistance != prevFrontDistance)
    106e:	20 91 42 05 	lds	r18, 0x0542
    1072:	30 91 43 05 	lds	r19, 0x0543
    1076:	80 91 40 05 	lds	r24, 0x0540
    107a:	90 91 41 05 	lds	r25, 0x0541
    107e:	28 17       	cp	r18, r24
    1080:	39 07       	cpc	r19, r25
    1082:	71 f0       	breq	.+28     	; 0x10a0 <sendDistanceToInterface+0x56>
        {
            itoa(frontDistance, DistanceFrontToChar, 10);
    1084:	80 91 42 05 	lds	r24, 0x0542
    1088:	90 91 43 05 	lds	r25, 0x0543
    108c:	4a e0       	ldi	r20, 0x0A	; 10
    108e:	61 ef       	ldi	r22, 0xF1	; 241
    1090:	75 e0       	ldi	r23, 0x05	; 5
    1092:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
            
            sendUartToInterface('I', DistanceFrontToChar);
    1096:	61 ef       	ldi	r22, 0xF1	; 241
    1098:	75 e0       	ldi	r23, 0x05	; 5
    109a:	89 e4       	ldi	r24, 0x49	; 73
    109c:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
        }
        prevFrontDistance = frontDistance;
    10a0:	80 91 42 05 	lds	r24, 0x0542
    10a4:	90 91 43 05 	lds	r25, 0x0543
    10a8:	90 93 41 05 	sts	0x0541, r25
    10ac:	80 93 40 05 	sts	0x0540, r24
    10b0:	08 95       	ret
    }
    else
    {
        
        newDistanceSide = HCSR04_get_distance_cm(sensor);
    10b2:	0e 94 4d 01 	call	0x29a	; 0x29a <HCSR04_get_distance_cm>
    10b6:	90 93 3f 05 	sts	0x053F, r25
    10ba:	80 93 3e 05 	sts	0x053E, r24
         
        sideDistance = newDistanceSide;
    10be:	80 91 3e 05 	lds	r24, 0x053E
    10c2:	90 91 3f 05 	lds	r25, 0x053F
    10c6:	90 93 3d 05 	sts	0x053D, r25
    10ca:	80 93 3c 05 	sts	0x053C, r24

        if (sideDistance != prevSideDistance)
    10ce:	20 91 3c 05 	lds	r18, 0x053C
    10d2:	30 91 3d 05 	lds	r19, 0x053D
    10d6:	80 91 3a 05 	lds	r24, 0x053A
    10da:	90 91 3b 05 	lds	r25, 0x053B
    10de:	28 17       	cp	r18, r24
    10e0:	39 07       	cpc	r19, r25
    10e2:	71 f0       	breq	.+28     	; 0x1100 <sendDistanceToInterface+0xb6>
        {
            itoa(sideDistance, DistanceFrontToChar, 10);
    10e4:	80 91 3c 05 	lds	r24, 0x053C
    10e8:	90 91 3d 05 	lds	r25, 0x053D
    10ec:	4a e0       	ldi	r20, 0x0A	; 10
    10ee:	61 ef       	ldi	r22, 0xF1	; 241
    10f0:	75 e0       	ldi	r23, 0x05	; 5
    10f2:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
        
            sendUartToInterface('J', DistanceFrontToChar);
    10f6:	61 ef       	ldi	r22, 0xF1	; 241
    10f8:	75 e0       	ldi	r23, 0x05	; 5
    10fa:	8a e4       	ldi	r24, 0x4A	; 74
    10fc:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
        }
        prevSideDistance = sideDistance;
    1100:	80 91 3c 05 	lds	r24, 0x053C
    1104:	90 91 3d 05 	lds	r25, 0x053D
    1108:	90 93 3b 05 	sts	0x053B, r25
    110c:	80 93 3a 05 	sts	0x053A, r24
    1110:	08 95       	ret

00001112 <sendLineToInterface>:
 * Function to send Linesensor value to PC interface
 *
 **************************************************/
void sendLineToInterface(void)
{
    newLine = LineSensors_value();
    1112:	0e 94 9f 02 	call	0x53e	; 0x53e <LineSensors_value>
    1116:	90 93 49 05 	sts	0x0549, r25
    111a:	80 93 48 05 	sts	0x0548, r24
    
    if (newLine != prevLine) {
    111e:	20 91 48 05 	lds	r18, 0x0548
    1122:	30 91 49 05 	lds	r19, 0x0549
    1126:	80 91 46 05 	lds	r24, 0x0546
    112a:	90 91 47 05 	lds	r25, 0x0547
    112e:	28 17       	cp	r18, r24
    1130:	39 07       	cpc	r19, r25
    1132:	71 f0       	breq	.+28     	; 0x1150 <sendLineToInterface+0x3e>
        itoa(newLine, lineToChar, 10);
    1134:	80 91 48 05 	lds	r24, 0x0548
    1138:	90 91 49 05 	lds	r25, 0x0549
    113c:	4a e0       	ldi	r20, 0x0A	; 10
    113e:	6d ee       	ldi	r22, 0xED	; 237
    1140:	75 e0       	ldi	r23, 0x05	; 5
    1142:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
        sendUartToInterface('F', lineToChar);
    1146:	6d ee       	ldi	r22, 0xED	; 237
    1148:	75 e0       	ldi	r23, 0x05	; 5
    114a:	86 e4       	ldi	r24, 0x46	; 70
    114c:	0c 94 17 08 	jmp	0x102e	; 0x102e <sendUartToInterface>
    1150:	08 95       	ret

00001152 <stopTimeMs>:
 *
 * @param ms
 *
 **************************************************/
void stopTimeMs(uint16_t ms)
{
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    time1ms = 0;
    1158:	10 92 14 05 	sts	0x0514, r1
    115c:	10 92 13 05 	sts	0x0513, r1
    
    while (time1ms <= ms) {
    1160:	80 91 13 05 	lds	r24, 0x0513
    1164:	90 91 14 05 	lds	r25, 0x0514
    1168:	c8 17       	cp	r28, r24
    116a:	d9 07       	cpc	r29, r25
    116c:	18 f0       	brcs	.+6      	; 0x1174 <stopTimeMs+0x22>
        stop();
    116e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <stop>
    1172:	f6 cf       	rjmp	.-20     	; 0x1160 <stopTimeMs+0xe>
    }
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <followLine>:
 *
 *
 **************************************************/
void followLine(void)
{
    if (adjustSpeed)
    117a:	80 91 15 05 	lds	r24, 0x0515
    117e:	88 23       	and	r24, r24
    1180:	c1 f0       	breq	.+48     	; 0x11b2 <followLine+0x38>
    {
        adjustSpeed = false;
    1182:	10 92 15 05 	sts	0x0515, r1
        LineSensors_check_all();
    1186:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
        sendLineToInterface();
    118a:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
        lineStateMachine(newLine, prevLine);
    118e:	60 91 46 05 	lds	r22, 0x0546
    1192:	70 91 47 05 	lds	r23, 0x0547
    1196:	80 91 48 05 	lds	r24, 0x0548
    119a:	90 91 49 05 	lds	r25, 0x0549
    119e:	0e 94 0a 06 	call	0xc14	; 0xc14 <lineStateMachine>
        prevLine = newLine;
    11a2:	80 91 48 05 	lds	r24, 0x0548
    11a6:	90 91 49 05 	lds	r25, 0x0549
    11aa:	90 93 47 05 	sts	0x0547, r25
    11ae:	80 93 46 05 	sts	0x0546, r24
    11b2:	08 95       	ret

000011b4 <driveDistanceEncoder>:
    }
}

void driveDistanceEncoder(int distanceInEncoderValues)
{
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	8c 01       	movw	r16, r24
    // Wheel diameter 37,78 mm. 1032 encoder values pr. revolution
    // distance in encoder values. 0.115 mm pr. encoder value. 100 mm = 869 encoder values

    int encoderCount = 0;
    11be:	c0 e0       	ldi	r28, 0x00	; 0
    11c0:	d0 e0       	ldi	r29, 0x00	; 0
    
    while (encoderCount <= distanceInEncoderValues )
    11c2:	0c 17       	cp	r16, r28
    11c4:	1d 07       	cpc	r17, r29
    11c6:	ec f0       	brlt	.+58     	; 0x1202 <driveDistanceEncoder+0x4e>
    {
        if (adjustSpeed)
    11c8:	80 91 15 05 	lds	r24, 0x0515
    11cc:	88 23       	and	r24, r24
    11ce:	e1 f3       	breq	.-8      	; 0x11c8 <driveDistanceEncoder+0x14>
        {
            adjustSpeed = false;
    11d0:	10 92 15 05 	sts	0x0515, r1
            encoderCount += (encoderValueRight + encoderValueLeft)/2;
    11d4:	20 91 16 05 	lds	r18, 0x0516
    11d8:	30 91 17 05 	lds	r19, 0x0517
    11dc:	80 91 18 05 	lds	r24, 0x0518
    11e0:	90 91 19 05 	lds	r25, 0x0519
    11e4:	28 0f       	add	r18, r24
    11e6:	39 1f       	adc	r19, r25
    11e8:	36 95       	lsr	r19
    11ea:	27 95       	ror	r18
    11ec:	c2 0f       	add	r28, r18
    11ee:	d3 1f       	adc	r29, r19
            drive(FORWARD, speed);
    11f0:	60 91 06 02 	lds	r22, 0x0206
    11f4:	70 91 07 02 	lds	r23, 0x0207
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    1200:	e0 cf       	rjmp	.-64     	; 0x11c2 <driveDistanceEncoder+0xe>
        }
    }
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <driveDistanceInCM>:

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	ac 01       	movw	r20, r24
    1210:	24 9f       	mul	r18, r20
    1212:	c0 01       	movw	r24, r0
    1214:	25 9f       	mul	r18, r21
    1216:	90 0d       	add	r25, r0
    1218:	11 24       	eor	r1, r1
    121a:	bc 01       	movw	r22, r24
    121c:	88 27       	eor	r24, r24
    121e:	77 fd       	sbrc	r23, 7
    1220:	80 95       	com	r24
    1222:	98 2f       	mov	r25, r24
    1224:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
    1228:	2f e1       	ldi	r18, 0x1F	; 31
    122a:	35 e8       	ldi	r19, 0x85	; 133
    122c:	4b ee       	ldi	r20, 0xEB	; 235
    122e:	5d e3       	ldi	r21, 0x3D	; 61
    1230:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__divsf3>
    1234:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixsfsi>
    
    driveDistanceEncoder(encoderValue);
    1238:	cb 01       	movw	r24, r22
    123a:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <driveDistanceEncoder>

0000123e <turnDegreesGyro>:
}

void turnDegreesGyro(int degrees, int leftOrRight)
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24
    UCSR1B |= (1<<RXCIE1);  // Enable uart1 interrupts
    1244:	80 91 c9 00 	lds	r24, 0x00C9
    1248:	80 68       	ori	r24, 0x80	; 128
    124a:	80 93 c9 00 	sts	0x00C9, r24
    
    // direction = 0 -> LEFT
    // direction = 1 -> RIGHT
    if (!leftOrRight )
    124e:	67 2b       	or	r22, r23
    1250:	81 f4       	brne	.+32     	; 0x1272 <turnDegreesGyro+0x34>
    {
        sendUartToInterface('H', "Turning left some degrees");
    1252:	6c ef       	ldi	r22, 0xFC	; 252
    1254:	72 e0       	ldi	r23, 0x02	; 2
    1256:	88 e4       	ldi	r24, 0x48	; 72
    1258:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
        sendUartToInterface('H', "Turning right some degrees");
    }
    
    if (!leftOrRight)   // LEFT
    {
        tempDegrees = direction - degrees;
    125c:	20 91 24 05 	lds	r18, 0x0524
    1260:	30 91 25 05 	lds	r19, 0x0525
    1264:	2c 1b       	sub	r18, r28
    1266:	3d 0b       	sbc	r19, r29
    1268:	30 93 39 05 	sts	0x0539, r19
    126c:	20 93 38 05 	sts	0x0538, r18
        
        while (direction >= tempDegrees)
    1270:	25 c0       	rjmp	.+74     	; 0x12bc <turnDegreesGyro+0x7e>
    {
        sendUartToInterface('H', "Turning left some degrees");
    }
    else
    {
        sendUartToInterface('H', "Turning right some degrees");
    1272:	66 e1       	ldi	r22, 0x16	; 22
    1274:	73 e0       	ldi	r23, 0x03	; 3
    1276:	88 e4       	ldi	r24, 0x48	; 72
    1278:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
            }
        }
    }
    else   // RIGHT
    {
        tempDegrees = direction + degrees;
    127c:	20 91 24 05 	lds	r18, 0x0524
    1280:	30 91 25 05 	lds	r19, 0x0525
    1284:	2c 0f       	add	r18, r28
    1286:	3d 1f       	adc	r19, r29
    1288:	30 93 39 05 	sts	0x0539, r19
    128c:	20 93 38 05 	sts	0x0538, r18
        
        while (direction <= tempDegrees)
    1290:	2f c0       	rjmp	.+94     	; 0x12f0 <turnDegreesGyro+0xb2>
    
    if (!leftOrRight)   // LEFT
    {
        tempDegrees = direction - degrees;
        
        while (direction >= tempDegrees)
    1292:	80 91 38 05 	lds	r24, 0x0538
    1296:	90 91 39 05 	lds	r25, 0x0539
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	6c f1       	brlt	.+90     	; 0x12fa <turnDegreesGyro+0xbc>
        {
            if (adjustSpeed)
    12a0:	80 91 15 05 	lds	r24, 0x0515
    12a4:	88 23       	and	r24, r24
    12a6:	a9 f3       	breq	.-22     	; 0x1292 <turnDegreesGyro+0x54>
            {
                adjustSpeed = false;
    12a8:	10 92 15 05 	sts	0x0515, r1
                drive(TURN_LEFT_TO_LINE, speed);
    12ac:	60 91 06 02 	lds	r22, 0x0206
    12b0:	70 91 07 02 	lds	r23, 0x0207
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    
    if (!leftOrRight)   // LEFT
    {
        tempDegrees = direction - degrees;
        
        while (direction >= tempDegrees)
    12bc:	20 91 24 05 	lds	r18, 0x0524
    12c0:	30 91 25 05 	lds	r19, 0x0525
    12c4:	e6 cf       	rjmp	.-52     	; 0x1292 <turnDegreesGyro+0x54>
    }
    else   // RIGHT
    {
        tempDegrees = direction + degrees;
        
        while (direction <= tempDegrees)
    12c6:	80 91 38 05 	lds	r24, 0x0538
    12ca:	90 91 39 05 	lds	r25, 0x0539
    12ce:	82 17       	cp	r24, r18
    12d0:	93 07       	cpc	r25, r19
    12d2:	b4 f0       	brlt	.+44     	; 0x1300 <turnDegreesGyro+0xc2>
        {
            if (adjustSpeed)
    12d4:	80 91 15 05 	lds	r24, 0x0515
    12d8:	88 23       	and	r24, r24
    12da:	a9 f3       	breq	.-22     	; 0x12c6 <turnDegreesGyro+0x88>
            {
                adjustSpeed = false;
    12dc:	10 92 15 05 	sts	0x0515, r1
                drive(TURN_RIGHT_TO_LINE, speed);
    12e0:	60 91 06 02 	lds	r22, 0x0206
    12e4:	70 91 07 02 	lds	r23, 0x0207
    12e8:	8a e0       	ldi	r24, 0x0A	; 10
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    }
    else   // RIGHT
    {
        tempDegrees = direction + degrees;
        
        while (direction <= tempDegrees)
    12f0:	20 91 24 05 	lds	r18, 0x0524
    12f4:	30 91 25 05 	lds	r19, 0x0525
    12f8:	e6 cf       	rjmp	.-52     	; 0x12c6 <turnDegreesGyro+0x88>
        }
    }
    
    if (!leftOrRight )
    {
        sendUartToInterface('H', "Done turning left some degrees");
    12fa:	61 e3       	ldi	r22, 0x31	; 49
    12fc:	73 e0       	ldi	r23, 0x03	; 3
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <turnDegreesGyro+0xc6>
    }
    else
    {
        sendUartToInterface('H', "Done turning right some degrees");
    1300:	60 e5       	ldi	r22, 0x50	; 80
    1302:	73 e0       	ldi	r23, 0x03	; 3
    1304:	88 e4       	ldi	r24, 0x48	; 72
    1306:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    }
    
    UCSR1B &= ~(1<<RXCIE1);  // Disable uart1 interrupts
    130a:	80 91 c9 00 	lds	r24, 0x00C9
    130e:	8f 77       	andi	r24, 0x7F	; 127
    1310:	80 93 c9 00 	sts	0x00C9, r24
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <turn90degreesEncoder>:

void turn90degreesEncoder(int direction)
{
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
    // direction = 0 -> LEFT
    // direction = 1 -> RIGHT
    if (!direction ) {
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	19 f4       	brne	.+6      	; 0x132e <turn90degreesEncoder+0x14>
        sendUartToInterface('H', "Turning left 90 degrees with encoder values");
    1328:	65 e7       	ldi	r22, 0x75	; 117
    132a:	73 e0       	ldi	r23, 0x03	; 3
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <turn90degreesEncoder+0x18>
    }
    else
    {
        sendUartToInterface('H', "Turning right 90 degrees with encoder values");
    132e:	66 ea       	ldi	r22, 0xA6	; 166
    1330:	73 e0       	ldi	r23, 0x03	; 3
    1332:	88 e4       	ldi	r24, 0x48	; 72
    1334:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    
    UCSR1B &= ~(1<<RXCIE1);  // Disable uart1 interrupts
}

void turn90degreesEncoder(int direction)
{
    1338:	00 e0       	ldi	r16, 0x00	; 0
    133a:	10 e0       	ldi	r17, 0x00	; 0
    
    int countTurn = 0;
    
    while (countTurn <= 3000) // 1,5 * 1032      2760
    {
        if (adjustSpeed)
    133c:	80 91 15 05 	lds	r24, 0x0515
    1340:	88 23       	and	r24, r24
    1342:	e1 f3       	breq	.-8      	; 0x133c <turn90degreesEncoder+0x22>
        {
            adjustSpeed = false;
    1344:	10 92 15 05 	sts	0x0515, r1
            countTurn += encoderValueLeft;
    1348:	80 91 16 05 	lds	r24, 0x0516
    134c:	90 91 17 05 	lds	r25, 0x0517
    1350:	08 0f       	add	r16, r24
    1352:	19 1f       	adc	r17, r25
    1354:	60 91 06 02 	lds	r22, 0x0206
    1358:	70 91 07 02 	lds	r23, 0x0207
            
            if (!direction) {
    135c:	20 97       	sbiw	r28, 0x00	; 0
    135e:	19 f4       	brne	.+6      	; 0x1366 <turn90degreesEncoder+0x4c>
                drive(TURN_LEFT_TO_LINE, speed);
    1360:	89 e0       	ldi	r24, 0x09	; 9
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <turn90degreesEncoder+0x50>
            }
            else
            {
                drive(TURN_RIGHT_TO_LINE, speed);
    1366:	8a e0       	ldi	r24, 0x0A	; 10
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
        sendUartToInterface('H', "Turning right 90 degrees with encoder values");
    }
    
    int countTurn = 0;
    
    while (countTurn <= 3000) // 1,5 * 1032      2760
    136e:	09 3b       	cpi	r16, 0xB9	; 185
    1370:	8b e0       	ldi	r24, 0x0B	; 11
    1372:	18 07       	cpc	r17, r24
    1374:	1c f3       	brlt	.-58     	; 0x133c <turn90degreesEncoder+0x22>
                drive(TURN_RIGHT_TO_LINE, speed);
            }
        }
    }
    
    if (!direction) {
    1376:	cd 2b       	or	r28, r29
    1378:	19 f4       	brne	.+6      	; 0x1380 <turn90degreesEncoder+0x66>
        sendUartToInterface('H', "Done Turning left 90 degrees with encoder values");
    137a:	60 e7       	ldi	r22, 0x70	; 112
    137c:	73 e0       	ldi	r23, 0x03	; 3
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <turn90degreesEncoder+0x6a>
    }
    else
    {
        sendUartToInterface('H', "Done Turning right 90 degrees with encoder values");
    1380:	61 ea       	ldi	r22, 0xA1	; 161
    1382:	73 e0       	ldi	r23, 0x03	; 3
    1384:	88 e4       	ldi	r24, 0x48	; 72
    }
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    if (!direction) {
        sendUartToInterface('H', "Done Turning left 90 degrees with encoder values");
    }
    else
    {
        sendUartToInterface('H', "Done Turning right 90 degrees with encoder values");
    138e:	0c 94 17 08 	jmp	0x102e	; 0x102e <sendUartToInterface>

00001392 <turnSomeDegreesEncoder>:
    }
}

void turnSomeDegreesEncoder(int direction, int degrees)
{
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
    13a0:	7b 01       	movw	r14, r22
    // direction = 0 -> LEFT
    // direction = 1 -> RIGHT
    if (!direction ) {
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	19 f4       	brne	.+6      	; 0x13ac <turnSomeDegreesEncoder+0x1a>
        sendUartToInterface('H', "Turning left some degrees with encoder values");
    13a6:	68 ed       	ldi	r22, 0xD8	; 216
    13a8:	73 e0       	ldi	r23, 0x03	; 3
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <turnSomeDegreesEncoder+0x1e>
    }
    else
    {
        sendUartToInterface('H', "Turning right some degrees with encoder values");
    13ac:	6b e0       	ldi	r22, 0x0B	; 11
    13ae:	74 e0       	ldi	r23, 0x04	; 4
    13b0:	88 e4       	ldi	r24, 0x48	; 72
    13b2:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
        sendUartToInterface('H', "Done Turning right 90 degrees with encoder values");
    }
}

void turnSomeDegreesEncoder(int direction, int degrees)
{
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	10 e0       	ldi	r17, 0x00	; 0
        sendUartToInterface('H', "Turning right some degrees with encoder values");
    }
    
    int countTurn = 0;
    
    while (countTurn <= degrees) // 1,5 * 1032      2760
    13ba:	e0 16       	cp	r14, r16
    13bc:	f1 06       	cpc	r15, r17
    13be:	d4 f0       	brlt	.+52     	; 0x13f4 <turnSomeDegreesEncoder+0x62>
    {
        if (adjustSpeed)
    13c0:	80 91 15 05 	lds	r24, 0x0515
    13c4:	88 23       	and	r24, r24
    13c6:	e1 f3       	breq	.-8      	; 0x13c0 <turnSomeDegreesEncoder+0x2e>
        {
            adjustSpeed = false;
    13c8:	10 92 15 05 	sts	0x0515, r1
            countTurn += encoderValueLeft;
    13cc:	80 91 16 05 	lds	r24, 0x0516
    13d0:	90 91 17 05 	lds	r25, 0x0517
    13d4:	08 0f       	add	r16, r24
    13d6:	19 1f       	adc	r17, r25
    13d8:	60 91 06 02 	lds	r22, 0x0206
    13dc:	70 91 07 02 	lds	r23, 0x0207
            
            if (!direction) {
    13e0:	20 97       	sbiw	r28, 0x00	; 0
    13e2:	19 f4       	brne	.+6      	; 0x13ea <turnSomeDegreesEncoder+0x58>
                drive(TURN_LEFT_TO_LINE, speed);
    13e4:	89 e0       	ldi	r24, 0x09	; 9
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <turnSomeDegreesEncoder+0x5c>
            }
            else
            {
                drive(TURN_RIGHT_TO_LINE, speed);
    13ea:	8a e0       	ldi	r24, 0x0A	; 10
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    13f2:	e3 cf       	rjmp	.-58     	; 0x13ba <turnSomeDegreesEncoder+0x28>
            }
        }
    }
    
    if (!direction) {
    13f4:	cd 2b       	or	r28, r29
    13f6:	19 f4       	brne	.+6      	; 0x13fe <turnSomeDegreesEncoder+0x6c>
        sendUartToInterface('H', "Done Turning left some degrees with encoder values");
    13f8:	63 ed       	ldi	r22, 0xD3	; 211
    13fa:	73 e0       	ldi	r23, 0x03	; 3
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <turnSomeDegreesEncoder+0x70>
    }
    else
    {
        sendUartToInterface('H', "Done Turning right some degrees with encoder values");
    13fe:	66 e0       	ldi	r22, 0x06	; 6
    1400:	74 e0       	ldi	r23, 0x04	; 4
    1402:	88 e4       	ldi	r24, 0x48	; 72
    }
}
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    if (!direction) {
        sendUartToInterface('H', "Done Turning left some degrees with encoder values");
    }
    else
    {
        sendUartToInterface('H', "Done Turning right some degrees with encoder values");
    1410:	0c 94 17 08 	jmp	0x102e	; 0x102e <sendUartToInterface>

00001414 <turnToLine>:
    }
}

void turnToLine(int direction)
{
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    // direction = 0 -> LEFT
    // direction = 1 -> RIGHT
    
    if (!direction) {
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	19 f4       	brne	.+6      	; 0x1424 <turnToLine+0x10>
        sendUartToInterface('H', "Turning left to line");
    141e:	6f e3       	ldi	r22, 0x3F	; 63
    1420:	74 e0       	ldi	r23, 0x04	; 4
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <turnToLine+0x14>
    }
    else
    {
        sendUartToInterface('H', "Turning right to line");
    1424:	69 e5       	ldi	r22, 0x59	; 89
    1426:	74 e0       	ldi	r23, 0x04	; 4
    1428:	88 e4       	ldi	r24, 0x48	; 72
    142a:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    // drive forward 8cm 80/0.115 = 435
    //driveDistanceEncoder(435);
    
    while (true)
    {
        if (adjustSpeed)
    142e:	80 91 15 05 	lds	r24, 0x0515
    1432:	88 23       	and	r24, r24
    1434:	e1 f3       	breq	.-8      	; 0x142e <turnToLine+0x1a>
        {
            adjustSpeed = false;
    1436:	10 92 15 05 	sts	0x0515, r1
            
            LineSensors_check_all();
    143a:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
            sendLineToInterface();
    143e:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
            
            if (!direction) {
                if (newLine == 0 && prevLine == 2)
    1442:	80 91 48 05 	lds	r24, 0x0548
    1446:	90 91 49 05 	lds	r25, 0x0549
            adjustSpeed = false;
            
            LineSensors_check_all();
            sendLineToInterface();
            
            if (!direction) {
    144a:	20 97       	sbiw	r28, 0x00	; 0
    144c:	91 f4       	brne	.+36     	; 0x1472 <turnToLine+0x5e>
                if (newLine == 0 && prevLine == 2)
    144e:	89 2b       	or	r24, r25
    1450:	49 f4       	brne	.+18     	; 0x1464 <turnToLine+0x50>
    1452:	80 91 46 05 	lds	r24, 0x0546
    1456:	90 91 47 05 	lds	r25, 0x0547
    145a:	02 97       	sbiw	r24, 0x02	; 2
    145c:	19 f4       	brne	.+6      	; 0x1464 <turnToLine+0x50>
                {
                    sendUartToInterface('H', "Done Turning left to line");
    145e:	6a e3       	ldi	r22, 0x3A	; 58
    1460:	74 e0       	ldi	r23, 0x04	; 4
    1462:	11 c0       	rjmp	.+34     	; 0x1486 <turnToLine+0x72>
                    break;
                }
                else
                {
                    drive(TURN_LEFT_TO_LINE, speed);
    1464:	60 91 06 02 	lds	r22, 0x0206
    1468:	70 91 07 02 	lds	r23, 0x0207
    146c:	89 e0       	ldi	r24, 0x09	; 9
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	15 c0       	rjmp	.+42     	; 0x149c <turnToLine+0x88>
                }
            }
            else
            {
                if (newLine == 0 && prevLine == 4)
    1472:	89 2b       	or	r24, r25
    1474:	69 f4       	brne	.+26     	; 0x1490 <turnToLine+0x7c>
    1476:	80 91 46 05 	lds	r24, 0x0546
    147a:	90 91 47 05 	lds	r25, 0x0547
    147e:	04 97       	sbiw	r24, 0x04	; 4
    1480:	39 f4       	brne	.+14     	; 0x1490 <turnToLine+0x7c>
                {
                    sendUartToInterface('H', "Done Turning right to line");
    1482:	64 e5       	ldi	r22, 0x54	; 84
    1484:	74 e0       	ldi	r23, 0x04	; 4
    1486:	88 e4       	ldi	r24, 0x48	; 72
                }
            }
            prevLine = newLine;
        }
    }
}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
            }
            else
            {
                if (newLine == 0 && prevLine == 4)
                {
                    sendUartToInterface('H', "Done Turning right to line");
    148c:	0c 94 17 08 	jmp	0x102e	; 0x102e <sendUartToInterface>
                    break;
                }
                else
                {
                    drive(TURN_RIGHT_TO_LINE, speed);
    1490:	60 91 06 02 	lds	r22, 0x0206
    1494:	70 91 07 02 	lds	r23, 0x0207
    1498:	8a e0       	ldi	r24, 0x0A	; 10
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
                }
            }
            prevLine = newLine;
    14a0:	80 91 48 05 	lds	r24, 0x0548
    14a4:	90 91 49 05 	lds	r25, 0x0549
    14a8:	90 93 47 05 	sts	0x0547, r25
    14ac:	80 93 46 05 	sts	0x0546, r24
    14b0:	be cf       	rjmp	.-132    	; 0x142e <turnToLine+0x1a>

000014b2 <findLine>:
    }
}

void findLine(void)
{
    while (!adjustSpeed);
    14b2:	80 91 15 05 	lds	r24, 0x0515
    14b6:	88 23       	and	r24, r24
    14b8:	e1 f3       	breq	.-8      	; 0x14b2 <findLine>
    if (adjustSpeed)
    14ba:	80 91 15 05 	lds	r24, 0x0515
    14be:	88 23       	and	r24, r24
    14c0:	a1 f1       	breq	.+104    	; 0x152a <findLine+0x78>
    {
        adjustSpeed = false;
    14c2:	10 92 15 05 	sts	0x0515, r1
        LineSensors_check_all();
    14c6:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
        sendLineToInterface();
    14ca:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>

        if (newLine == 15 || newLine == 7 || newLine == 14)
    14ce:	80 91 48 05 	lds	r24, 0x0548
    14d2:	90 91 49 05 	lds	r25, 0x0549
    14d6:	0f 97       	sbiw	r24, 0x0f	; 15
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <findLine+0x40>
    14da:	80 91 48 05 	lds	r24, 0x0548
    14de:	90 91 49 05 	lds	r25, 0x0549
    14e2:	07 97       	sbiw	r24, 0x07	; 7
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <findLine+0x40>
    14e6:	80 91 48 05 	lds	r24, 0x0548
    14ea:	90 91 49 05 	lds	r25, 0x0549
    14ee:	0e 97       	sbiw	r24, 0x0e	; 14
    14f0:	61 f4       	brne	.+24     	; 0x150a <findLine+0x58>
        {
            sendUartToInterface('H', "Line found");
    14f2:	6f e6       	ldi	r22, 0x6F	; 111
    14f4:	74 e0       	ldi	r23, 0x04	; 4
    14f6:	88 e4       	ldi	r24, 0x48	; 72
    14f8:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
            lineFoundFlag = 1;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 37 05 	sts	0x0537, r25
    1504:	80 93 36 05 	sts	0x0536, r24
    1508:	08 c0       	rjmp	.+16     	; 0x151a <findLine+0x68>
        }
        else
        {
            drive(FORWARD, speed); // Straight outta Compton
    150a:	60 91 06 02 	lds	r22, 0x0206
    150e:	70 91 07 02 	lds	r23, 0x0207
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
        }
        prevLine = newLine;
    151a:	80 91 48 05 	lds	r24, 0x0548
    151e:	90 91 49 05 	lds	r25, 0x0549
    1522:	90 93 47 05 	sts	0x0547, r25
    1526:	80 93 46 05 	sts	0x0546, r24
    152a:	08 95       	ret

0000152c <octagon>:

void octagon(void)
{
    int flag = 0;
    
    sendUartToInterface('H', "Octagon");
    152c:	6a e7       	ldi	r22, 0x7A	; 122
    152e:	74 e0       	ldi	r23, 0x04	; 4
    1530:	88 e4       	ldi	r24, 0x48	; 72
    1532:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    
    driveDistanceEncoder(5087);
    1536:	8f ed       	ldi	r24, 0xDF	; 223
    1538:	93 e1       	ldi	r25, 0x13	; 19
    153a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    // turn 90 degrees right
    turn90degreesEncoder(RIGHT);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 8d 09 	call	0x131a	; 0x131a <turn90degreesEncoder>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1546:	83 ee       	ldi	r24, 0xE3	; 227
    1548:	9b e0       	ldi	r25, 0x0B	; 11
    154a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    // turn 90 degrees right
    turn90degreesEncoder(RIGHT);
    
    driveDistanceInCM(35);
    stopTimeMs(300);
    154e:	8c e2       	ldi	r24, 0x2C	; 44
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    1556:	68 ee       	ldi	r22, 0xE8	; 232
    1558:	73 e0       	ldi	r23, 0x03	; 3
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    1562:	8c e2       	ldi	r24, 0x2C	; 44
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    156a:	83 ee       	ldi	r24, 0xE3	; 227
    156c:	9b e0       	ldi	r25, 0x0B	; 11
    156e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    driveDistanceInCM(35);
    stopTimeMs(300);
    1572:	8c e2       	ldi	r24, 0x2C	; 44
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    157a:	68 ee       	ldi	r22, 0xE8	; 232
    157c:	73 e0       	ldi	r23, 0x03	; 3
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    1586:	8c e2       	ldi	r24, 0x2C	; 44
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    158e:	8b ef       	ldi	r24, 0xFB	; 251
    1590:	90 e1       	ldi	r25, 0x10	; 16
    1592:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    driveDistanceInCM(50);
    stopTimeMs(300);
    1596:	8c e2       	ldi	r24, 0x2C	; 44
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    159e:	68 ee       	ldi	r22, 0xE8	; 232
    15a0:	73 e0       	ldi	r23, 0x03	; 3
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    15aa:	8c e2       	ldi	r24, 0x2C	; 44
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    15b2:	8a e3       	ldi	r24, 0x3A	; 58
    15b4:	9c e0       	ldi	r25, 0x0C	; 12
    15b6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    driveDistanceInCM(36);
    stopTimeMs(300);
    15ba:	8c e2       	ldi	r24, 0x2C	; 44
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    15c2:	68 ee       	ldi	r22, 0xE8	; 232
    15c4:	73 e0       	ldi	r23, 0x03	; 3
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    15ce:	8c e2       	ldi	r24, 0x2C	; 44
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    
    
    while (!flag)
    {
        if (adjustSpeed)
    15d6:	80 91 15 05 	lds	r24, 0x0515
    15da:	88 23       	and	r24, r24
    15dc:	e1 f3       	breq	.-8      	; 0x15d6 <octagon+0xaa>
        {
            adjustSpeed = false;
    15de:	10 92 15 05 	sts	0x0515, r1
            LineSensors_check_all();
    15e2:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
            sendLineToInterface();
    15e6:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
            
            if (newLine == 15 || newLine == 7 || newLine == 14)
    15ea:	80 91 48 05 	lds	r24, 0x0548
    15ee:	90 91 49 05 	lds	r25, 0x0549
    15f2:	0f 97       	sbiw	r24, 0x0f	; 15
    15f4:	69 f0       	breq	.+26     	; 0x1610 <octagon+0xe4>
    15f6:	80 91 48 05 	lds	r24, 0x0548
    15fa:	90 91 49 05 	lds	r25, 0x0549
    15fe:	07 97       	sbiw	r24, 0x07	; 7
    1600:	39 f0       	breq	.+14     	; 0x1610 <octagon+0xe4>
    1602:	80 91 48 05 	lds	r24, 0x0548
    1606:	90 91 49 05 	lds	r25, 0x0549
    160a:	0e 97       	sbiw	r24, 0x0e	; 14
    160c:	09 f0       	breq	.+2      	; 0x1610 <octagon+0xe4>
    160e:	46 c0       	rjmp	.+140    	; 0x169c <octagon+0x170>
            {
                
                if (newLine == 7)
    1610:	80 91 48 05 	lds	r24, 0x0548
    1614:	90 91 49 05 	lds	r25, 0x0549
    1618:	07 97       	sbiw	r24, 0x07	; 7
    161a:	c9 f0       	breq	.+50     	; 0x164e <octagon+0x122>
                        }
                    }
                    
                }
                
                if (newLine == 14)
    161c:	80 91 48 05 	lds	r24, 0x0548
    1620:	90 91 49 05 	lds	r25, 0x0549
    1624:	0e 97       	sbiw	r24, 0x0e	; 14
    1626:	91 f5       	brne	.+100    	; 0x168c <octagon+0x160>
    1628:	2b c0       	rjmp	.+86     	; 0x1680 <octagon+0x154>
                {
//                    driveDistanceInCM(1);
                    
                    while (!(newLine == 15))
                    {
                        if (adjustSpeed)
    162a:	80 91 15 05 	lds	r24, 0x0515
    162e:	88 23       	and	r24, r24
    1630:	71 f0       	breq	.+28     	; 0x164e <octagon+0x122>
                        {
                            adjustSpeed = false;
    1632:	10 92 15 05 	sts	0x0515, r1
                            LineSensors_check_all();
    1636:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
                            sendLineToInterface();
    163a:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
                            drive(TURN_LEFT_TO_LINE, speed);
    163e:	60 91 06 02 	lds	r22, 0x0206
    1642:	70 91 07 02 	lds	r23, 0x0207
    1646:	89 e0       	ldi	r24, 0x09	; 9
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
                
                if (newLine == 7)
                {
//                    driveDistanceInCM(1);
                    
                    while (!(newLine == 15))
    164e:	80 91 48 05 	lds	r24, 0x0548
    1652:	90 91 49 05 	lds	r25, 0x0549
    1656:	0f 97       	sbiw	r24, 0x0f	; 15
    1658:	41 f7       	brne	.-48     	; 0x162a <octagon+0xfe>
    165a:	e0 cf       	rjmp	.-64     	; 0x161c <octagon+0xf0>
                {
//                    driveDistanceInCM(1);
                    
                    while (!(newLine == 15))
                    {
                        if (adjustSpeed)
    165c:	80 91 15 05 	lds	r24, 0x0515
    1660:	88 23       	and	r24, r24
    1662:	71 f0       	breq	.+28     	; 0x1680 <octagon+0x154>
                        {
                            adjustSpeed = false;
    1664:	10 92 15 05 	sts	0x0515, r1
                            LineSensors_check_all();
    1668:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
                            sendLineToInterface();
    166c:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
                            drive(TURN_RIGHT_TO_LINE, speed);
    1670:	60 91 06 02 	lds	r22, 0x0206
    1674:	70 91 07 02 	lds	r23, 0x0207
    1678:	8a e0       	ldi	r24, 0x0A	; 10
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
                
                if (newLine == 14)
                {
//                    driveDistanceInCM(1);
                    
                    while (!(newLine == 15))
    1680:	80 91 48 05 	lds	r24, 0x0548
    1684:	90 91 49 05 	lds	r25, 0x0549
    1688:	0f 97       	sbiw	r24, 0x0f	; 15
    168a:	41 f7       	brne	.-48     	; 0x165c <octagon+0x130>
                        }
                    }
                    
                }
                
                sendUartToInterface('H', "Line found");
    168c:	6f e6       	ldi	r22, 0x6F	; 111
    168e:	74 e0       	ldi	r23, 0x04	; 4
    1690:	88 e4       	ldi	r24, 0x48	; 72
    1692:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                flag = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <octagon+0x184>
            }
            else
            {
                drive(FORWARD, speed); // Straight outta Compton
    169c:	60 91 06 02 	lds	r22, 0x0206
    16a0:	70 91 07 02 	lds	r23, 0x0207
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
            }
            prevLine = newLine;
    16b0:	20 91 48 05 	lds	r18, 0x0548
    16b4:	30 91 49 05 	lds	r19, 0x0549
    16b8:	30 93 47 05 	sts	0x0547, r19
    16bc:	20 93 46 05 	sts	0x0546, r18
    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    
    
    while (!flag)
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <octagon+0x19a>
    16c4:	88 cf       	rjmp	.-240    	; 0x15d6 <octagon+0xaa>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    16c6:	83 ee       	ldi	r24, 0xE3	; 227
    16c8:	9b e0       	ldi	r25, 0x0B	; 11
    16ca:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    }

    flag = 0;
    
    driveDistanceInCM(35);
    stopTimeMs(300);
    16ce:	8c e2       	ldi	r24, 0x2C	; 44
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    16d6:	68 ee       	ldi	r22, 0xE8	; 232
    16d8:	73 e0       	ldi	r23, 0x03	; 3
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    16e2:	8c e2       	ldi	r24, 0x2C	; 44
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    16ea:	8a e3       	ldi	r24, 0x3A	; 58
    16ec:	9c e0       	ldi	r25, 0x0C	; 12
    16ee:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    driveDistanceInCM(36);
    stopTimeMs(300);
    16f2:	8c e2       	ldi	r24, 0x2C	; 44
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

    turnSomeDegreesEncoder(RIGHT, 1000);
    16fa:	68 ee       	ldi	r22, 0xE8	; 232
    16fc:	73 e0       	ldi	r23, 0x03	; 3
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    1706:	8c e2       	ldi	r24, 0x2C	; 44
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    170e:	8b ef       	ldi	r24, 0xFB	; 251
    1710:	90 e1       	ldi	r25, 0x10	; 16
    1712:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>

    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    driveDistanceInCM(50);
    stopTimeMs(300);
    1716:	8c e2       	ldi	r24, 0x2C	; 44
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    171e:	68 ee       	ldi	r22, 0xE8	; 232
    1720:	73 e0       	ldi	r23, 0x03	; 3
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    172a:	8c e2       	ldi	r24, 0x2C	; 44
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1732:	8a e3       	ldi	r24, 0x3A	; 58
    1734:	9c e0       	ldi	r25, 0x0C	; 12
    1736:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    stopTimeMs(300);
    
    driveDistanceInCM(36);
    stopTimeMs(300);
    173a:	8c e2       	ldi	r24, 0x2C	; 44
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    
    turnSomeDegreesEncoder(RIGHT, 1000);
    1742:	68 ee       	ldi	r22, 0xE8	; 232
    1744:	73 e0       	ldi	r23, 0x03	; 3
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
    stopTimeMs(300);
    174e:	8c e2       	ldi	r24, 0x2C	; 44
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
//    stopTimeMs(300);
    
    
    while (!flag)
    {
        if (adjustSpeed)
    1756:	80 91 15 05 	lds	r24, 0x0515
    175a:	88 23       	and	r24, r24
    175c:	e1 f3       	breq	.-8      	; 0x1756 <octagon+0x22a>
        {
            adjustSpeed = false;
    175e:	10 92 15 05 	sts	0x0515, r1
            LineSensors_check_all();
    1762:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
            sendLineToInterface();
    1766:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
        
            if (newLine == 15 || newLine == 7 || newLine == 14)
    176a:	80 91 48 05 	lds	r24, 0x0548
    176e:	90 91 49 05 	lds	r25, 0x0549
    1772:	0f 97       	sbiw	r24, 0x0f	; 15
    1774:	61 f0       	breq	.+24     	; 0x178e <octagon+0x262>
    1776:	80 91 48 05 	lds	r24, 0x0548
    177a:	90 91 49 05 	lds	r25, 0x0549
    177e:	07 97       	sbiw	r24, 0x07	; 7
    1780:	31 f0       	breq	.+12     	; 0x178e <octagon+0x262>
    1782:	80 91 48 05 	lds	r24, 0x0548
    1786:	90 91 49 05 	lds	r25, 0x0549
    178a:	0e 97       	sbiw	r24, 0x0e	; 14
    178c:	41 f4       	brne	.+16     	; 0x179e <octagon+0x272>
            {
                sendUartToInterface('H', "Line found");
    178e:	6f e6       	ldi	r22, 0x6F	; 111
    1790:	74 e0       	ldi	r23, 0x04	; 4
    1792:	88 e4       	ldi	r24, 0x48	; 72
    1794:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                flag = 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0a c0       	rjmp	.+20     	; 0x17b2 <octagon+0x286>
            }
            else
            {
                drive(FORWARD, speed); // Straight outta Compton
    179e:	60 91 06 02 	lds	r22, 0x0206
    17a2:	70 91 07 02 	lds	r23, 0x0207
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
            }
            prevLine = newLine;
    17b2:	20 91 48 05 	lds	r18, 0x0548
    17b6:	30 91 49 05 	lds	r19, 0x0549
    17ba:	30 93 47 05 	sts	0x0547, r19
    17be:	20 93 46 05 	sts	0x0546, r18
    
//    driveDistanceInCM(25);
//    stopTimeMs(300);
    
    
    while (!flag)
    17c2:	89 2b       	or	r24, r25
    17c4:	41 f2       	breq	.-112    	; 0x1756 <octagon+0x22a>
            }
            prevLine = newLine;
        }
    }
    
    turnToLine(LEFT);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 0a 0a 	call	0x1414	; 0x1414 <turnToLine>
//    uart1_puts("W\r\n");    // send turret to 90 degrees
//    
//    stopTimeMs(4000);

    
    fullCircleDone = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	90 93 35 05 	sts	0x0535, r25
    17d6:	80 93 34 05 	sts	0x0534, r24
    17da:	08 95       	ret

000017dc <fullCircle>:

}

void fullCircle(void)
{
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	1f 92       	push	r1
    17ea:	1f 92       	push	r1
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    sendUartToInterface('H', "Full circle function");
    17f0:	62 e8       	ldi	r22, 0x82	; 130
    17f2:	74 e0       	ldi	r23, 0x04	; 4
    17f4:	88 e4       	ldi	r24, 0x48	; 72
    17f6:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    volatile int lineCount = 0;
    17fa:	1a 82       	std	Y+2, r1	; 0x02
    17fc:	19 82       	std	Y+1, r1	; 0x01

    // drive forward 58.5 cm 585/0.115 = 5087
    driveDistanceEncoder(5087);
    17fe:	8f ed       	ldi	r24, 0xDF	; 223
    1800:	93 e1       	ldi	r25, 0x13	; 19
    1802:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
//        driveDistanceEncoder(15087);
    
    LineSensors_check_all();
    1806:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
    
    // turn 90 degrees right
    turn90degreesEncoder(RIGHT);
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 8d 09 	call	0x131a	; 0x131a <turn90degreesEncoder>
    
    newLine = 0;
    1812:	10 92 49 05 	sts	0x0549, r1
    1816:	10 92 48 05 	sts	0x0548, r1
    
    driveDistanceEncoder(435); // 5 cm
    181a:	83 eb       	ldi	r24, 0xB3	; 179
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
        if ((newLine == 15 || newLine == 14 || newLine == 12 || newLine == 8) && lineCount == 0)
        {
            sendUartToInterface('H', "linecount++");
            driveDistanceEncoder(500); // 5 cm
            newLine = 0;
            lineCount = 1;
    1822:	ee 24       	eor	r14, r14
    1824:	e3 94       	inc	r14
    1826:	f1 2c       	mov	r15, r1
    driveDistanceEncoder(435); // 5 cm
        
    while (1)
    {
        
        while (!adjustSpeed);
    1828:	80 91 15 05 	lds	r24, 0x0515
    182c:	88 23       	and	r24, r24
    182e:	e1 f3       	breq	.-8      	; 0x1828 <fullCircle+0x4c>
        if (adjustSpeed)
    1830:	80 91 15 05 	lds	r24, 0x0515
    1834:	88 23       	and	r24, r24
    1836:	61 f0       	breq	.+24     	; 0x1850 <fullCircle+0x74>
        {
            adjustSpeed = false;
    1838:	10 92 15 05 	sts	0x0515, r1
            LineSensors_check_all();
    183c:	0e 94 87 02 	call	0x50e	; 0x50e <LineSensors_check_all>
            sendLineToInterface();
    1840:	0e 94 89 08 	call	0x1112	; 0x1112 <sendLineToInterface>
            drive(12, 160); // 70
    1844:	60 ea       	ldi	r22, 0xA0	; 160
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	8c e0       	ldi	r24, 0x0C	; 12
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
        }
        if ((newLine == 15 || newLine == 14 || newLine == 12 || newLine == 8) && lineCount == 0)
    1850:	80 91 48 05 	lds	r24, 0x0548
    1854:	90 91 49 05 	lds	r25, 0x0549
    1858:	0f 97       	sbiw	r24, 0x0f	; 15
    185a:	91 f0       	breq	.+36     	; 0x1880 <fullCircle+0xa4>
    185c:	80 91 48 05 	lds	r24, 0x0548
    1860:	90 91 49 05 	lds	r25, 0x0549
    1864:	0e 97       	sbiw	r24, 0x0e	; 14
    1866:	61 f0       	breq	.+24     	; 0x1880 <fullCircle+0xa4>
    1868:	80 91 48 05 	lds	r24, 0x0548
    186c:	90 91 49 05 	lds	r25, 0x0549
    1870:	0c 97       	sbiw	r24, 0x0c	; 12
    1872:	31 f0       	breq	.+12     	; 0x1880 <fullCircle+0xa4>
    1874:	80 91 48 05 	lds	r24, 0x0548
    1878:	90 91 49 05 	lds	r25, 0x0549
    187c:	08 97       	sbiw	r24, 0x08	; 8
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <fullCircle+0xcc>
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	89 2b       	or	r24, r25
    1886:	81 f4       	brne	.+32     	; 0x18a8 <fullCircle+0xcc>
        {
            sendUartToInterface('H', "linecount++");
    1888:	67 e9       	ldi	r22, 0x97	; 151
    188a:	74 e0       	ldi	r23, 0x04	; 4
    188c:	88 e4       	ldi	r24, 0x48	; 72
    188e:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
            driveDistanceEncoder(500); // 5 cm
    1892:	84 ef       	ldi	r24, 0xF4	; 244
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
            newLine = 0;
    189a:	10 92 49 05 	sts	0x0549, r1
    189e:	10 92 48 05 	sts	0x0548, r1
            lineCount = 1;
    18a2:	fa 82       	std	Y+2, r15	; 0x02
    18a4:	e9 82       	std	Y+1, r14	; 0x01
    18a6:	3c c0       	rjmp	.+120    	; 0x1920 <fullCircle+0x144>
        }
        else if ((newLine == 15 || newLine == 14 || newLine == 12 || newLine == 8) && lineCount == 1)
    18a8:	80 91 48 05 	lds	r24, 0x0548
    18ac:	90 91 49 05 	lds	r25, 0x0549
    18b0:	0f 97       	sbiw	r24, 0x0f	; 15
    18b2:	91 f0       	breq	.+36     	; 0x18d8 <fullCircle+0xfc>
    18b4:	80 91 48 05 	lds	r24, 0x0548
    18b8:	90 91 49 05 	lds	r25, 0x0549
    18bc:	0e 97       	sbiw	r24, 0x0e	; 14
    18be:	61 f0       	breq	.+24     	; 0x18d8 <fullCircle+0xfc>
    18c0:	80 91 48 05 	lds	r24, 0x0548
    18c4:	90 91 49 05 	lds	r25, 0x0549
    18c8:	0c 97       	sbiw	r24, 0x0c	; 12
    18ca:	31 f0       	breq	.+12     	; 0x18d8 <fullCircle+0xfc>
    18cc:	80 91 48 05 	lds	r24, 0x0548
    18d0:	90 91 49 05 	lds	r25, 0x0549
    18d4:	08 97       	sbiw	r24, 0x08	; 8
    18d6:	21 f5       	brne	.+72     	; 0x1920 <fullCircle+0x144>
    18d8:	09 81       	ldd	r16, Y+1	; 0x01
    18da:	1a 81       	ldd	r17, Y+2	; 0x02
    18dc:	01 30       	cpi	r16, 0x01	; 1
    18de:	11 05       	cpc	r17, r1
    18e0:	f9 f4       	brne	.+62     	; 0x1920 <fullCircle+0x144>
        {
            driveDistanceEncoder(435); // 5 cm
    18e2:	83 eb       	ldi	r24, 0xB3	; 179
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
            sendUartToInterface('H', "break");
    18ea:	63 ea       	ldi	r22, 0xA3	; 163
    18ec:	74 e0       	ldi	r23, 0x04	; 4
    18ee:	88 e4       	ldi	r24, 0x48	; 72
    18f0:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
        }
        
        prevLine = newLine;
    }

    sendUartToInterface('H', "Full circle done");
    18f4:	69 ea       	ldi	r22, 0xA9	; 169
    18f6:	74 e0       	ldi	r23, 0x04	; 4
    18f8:	88 e4       	ldi	r24, 0x48	; 72
    18fa:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    turnToLine(LEFT);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 0a 0a 	call	0x1414	; 0x1414 <turnToLine>
    
    fullCircleDone = 1;
    1906:	10 93 35 05 	sts	0x0535, r17
    190a:	00 93 34 05 	sts	0x0534, r16
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret
            driveDistanceEncoder(435); // 5 cm
            sendUartToInterface('H', "break");
            break;
        }
        
        prevLine = newLine;
    1920:	80 91 48 05 	lds	r24, 0x0548
    1924:	90 91 49 05 	lds	r25, 0x0549
    1928:	90 93 47 05 	sts	0x0547, r25
    192c:	80 93 46 05 	sts	0x0546, r24
    }
    1930:	7b cf       	rjmp	.-266    	; 0x1828 <fullCircle+0x4c>

00001932 <followWall>:
    
    fullCircleDone = 1;
}

void followWall(int distanceToWall)
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
    sendDistanceToInterface(SIDE_SENSOR);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 25 08 	call	0x104a	; 0x104a <sendDistanceToInterface>
    
    if (sideDistance < distanceToWall)
    1940:	80 91 3c 05 	lds	r24, 0x053C
    1944:	90 91 3d 05 	lds	r25, 0x053D
    1948:	8c 17       	cp	r24, r28
    194a:	9d 07       	cpc	r25, r29
    194c:	6c f4       	brge	.+26     	; 0x1968 <followWall+0x36>
    {
        if (adjustSpeed)
    194e:	80 91 15 05 	lds	r24, 0x0515
    1952:	88 23       	and	r24, r24
    1954:	a1 f1       	breq	.+104    	; 0x19be <followWall+0x8c>
        {
            adjustSpeed = false;
    1956:	10 92 15 05 	sts	0x0515, r1
            drive(NUDGE_RIGHT, speed);
    195a:	60 91 06 02 	lds	r22, 0x0206
    195e:	70 91 07 02 	lds	r23, 0x0207
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	13 c0       	rjmp	.+38     	; 0x198e <followWall+0x5c>
            sendDistanceToInterface(SIDE_SENSOR);
        }
    }
    else if (sideDistance > distanceToWall)
    1968:	80 91 3c 05 	lds	r24, 0x053C
    196c:	90 91 3d 05 	lds	r25, 0x053D
    1970:	c8 17       	cp	r28, r24
    1972:	d9 07       	cpc	r29, r25
    1974:	a4 f4       	brge	.+40     	; 0x199e <followWall+0x6c>
    {
        if (adjustSpeed)
    1976:	80 91 15 05 	lds	r24, 0x0515
    197a:	88 23       	and	r24, r24
    197c:	01 f1       	breq	.+64     	; 0x19be <followWall+0x8c>
        {
            adjustSpeed = false;
    197e:	10 92 15 05 	sts	0x0515, r1
            drive(NUDGE_LEFT, speed);
    1982:	60 91 06 02 	lds	r22, 0x0206
    1986:	70 91 07 02 	lds	r23, 0x0207
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
            sendDistanceToInterface(SIDE_SENSOR);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    {
        while (!adjustSpeed);
        adjustSpeed = false;
        drive(FORWARD, speed);
    }
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    {
        if (adjustSpeed)
        {
            adjustSpeed = false;
            drive(NUDGE_LEFT, speed);
            sendDistanceToInterface(SIDE_SENSOR);
    199a:	0c 94 25 08 	jmp	0x104a	; 0x104a <sendDistanceToInterface>
        }
    }
    else
    {
        while (!adjustSpeed);
    199e:	80 91 15 05 	lds	r24, 0x0515
    19a2:	88 23       	and	r24, r24
    19a4:	e1 f3       	breq	.-8      	; 0x199e <followWall+0x6c>
        adjustSpeed = false;
    19a6:	10 92 15 05 	sts	0x0515, r1
        drive(FORWARD, speed);
    19aa:	60 91 06 02 	lds	r22, 0x0206
    19ae:	70 91 07 02 	lds	r23, 0x0207
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    }
    else
    {
        while (!adjustSpeed);
        adjustSpeed = false;
        drive(FORWARD, speed);
    19ba:	0c 94 a9 03 	jmp	0x752	; 0x752 <drive>
    }
}
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <followWallStateMachine>:

void followWallStateMachine(void)
{
    speed = 120;
    19c4:	88 e7       	ldi	r24, 0x78	; 120
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	90 93 07 02 	sts	0x0207, r25
    19cc:	80 93 06 02 	sts	0x0206, r24
    
    switch (wall_state)
    19d0:	80 91 2a 05 	lds	r24, 0x052A
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	09 f4       	brne	.+2      	; 0x19da <followWallStateMachine+0x16>
    19d8:	5a c0       	rjmp	.+180    	; 0x1a8e <followWallStateMachine+0xca>
    19da:	28 f4       	brcc	.+10     	; 0x19e6 <followWallStateMachine+0x22>
    19dc:	88 23       	and	r24, r24
    19de:	61 f0       	breq	.+24     	; 0x19f8 <followWallStateMachine+0x34>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	79 f1       	breq	.+94     	; 0x1a42 <followWallStateMachine+0x7e>
    19e4:	08 95       	ret
    19e6:	84 30       	cpi	r24, 0x04	; 4
    19e8:	09 f4       	brne	.+2      	; 0x19ec <followWallStateMachine+0x28>
    19ea:	9d c0       	rjmp	.+314    	; 0x1b26 <followWallStateMachine+0x162>
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <followWallStateMachine+0x2c>
    19ee:	75 c0       	rjmp	.+234    	; 0x1ada <followWallStateMachine+0x116>
    19f0:	85 30       	cpi	r24, 0x05	; 5
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <followWallStateMachine+0x32>
    19f4:	b8 c0       	rjmp	.+368    	; 0x1b66 <followWallStateMachine+0x1a2>
    19f6:	08 95       	ret
    {
        case FIND_WALL:
            if (wallStateMessage == 0)
    19f8:	80 91 2e 05 	lds	r24, 0x052E
    19fc:	90 91 2f 05 	lds	r25, 0x052F
    1a00:	89 2b       	or	r24, r25
    1a02:	31 f4       	brne	.+12     	; 0x1a10 <followWallStateMachine+0x4c>
            {
                wallStateMessage = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	90 93 2f 05 	sts	0x052F, r25
    1a0c:	80 93 2e 05 	sts	0x052E, r24

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1a10:	85 ea       	ldi	r24, 0xA5	; 165
    1a12:	92 e2       	ldi	r25, 0x22	; 34
    1a14:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
            {
                wallStateMessage = 1;
            }
            
            driveDistanceInCM(102);
            stopTimeMs(500);
    1a18:	84 ef       	ldi	r24, 0xF4	; 244
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
            
            // turn 90 degrees right
            turnDegreesGyro(3, RIGHT);
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 1f 09 	call	0x123e	; 0x123e <turnDegreesGyro>
            
            
            stopTimeMs(500);
    1a2c:	84 ef       	ldi	r24, 0xF4	; 244
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
            
            wallStateMessage = 0;
    1a34:	10 92 2f 05 	sts	0x052F, r1
    1a38:	10 92 2e 05 	sts	0x052E, r1
            wall_state = FIRST;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 2a 05 	sts	0x052A, r24
            
        case FIRST:
            if (wallStateMessage == 0)
    1a42:	80 91 2e 05 	lds	r24, 0x052E
    1a46:	90 91 2f 05 	lds	r25, 0x052F
    1a4a:	89 2b       	or	r24, r25
    1a4c:	59 f4       	brne	.+22     	; 0x1a64 <followWallStateMachine+0xa0>
            {
                sendUartToInterface('C', "SW2");
    1a4e:	6a eb       	ldi	r22, 0xBA	; 186
    1a50:	74 e0       	ldi	r23, 0x04	; 4
    1a52:	83 e4       	ldi	r24, 0x43	; 67
    1a54:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                wallStateMessage = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	90 93 2f 05 	sts	0x052F, r25
    1a60:	80 93 2e 05 	sts	0x052E, r24

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1a64:	81 e6       	ldi	r24, 0x61	; 97
    1a66:	94 e1       	ldi	r25, 0x14	; 20
    1a68:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
                wallStateMessage = 1;
            }
            
            driveDistanceInCM(60);
            
            stopTimeMs(500);
    1a6c:	84 ef       	ldi	r24, 0xF4	; 244
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
            
            // turn 90 degrees left
            turnDegreesGyro(23, LEFT);
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	87 e1       	ldi	r24, 0x17	; 23
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 1f 09 	call	0x123e	; 0x123e <turnDegreesGyro>
            //            turn90degreesEncoder(LEFT);
            
            wallStateMessage = 0;
    1a80:	10 92 2f 05 	sts	0x052F, r1
    1a84:	10 92 2e 05 	sts	0x052E, r1
            wall_state = SECOND;
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	80 93 2a 05 	sts	0x052A, r24
            
            //            break;
            
        case SECOND:
            if (wallStateMessage == 0)
    1a8e:	80 91 2e 05 	lds	r24, 0x052E
    1a92:	90 91 2f 05 	lds	r25, 0x052F
    1a96:	89 2b       	or	r24, r25
    1a98:	59 f4       	brne	.+22     	; 0x1ab0 <followWallStateMachine+0xec>
            {
                sendUartToInterface('C', "SW3");
    1a9a:	6e eb       	ldi	r22, 0xBE	; 190
    1a9c:	74 e0       	ldi	r23, 0x04	; 4
    1a9e:	83 e4       	ldi	r24, 0x43	; 67
    1aa0:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                wallStateMessage = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	90 93 2f 05 	sts	0x052F, r25
    1aac:	80 93 2e 05 	sts	0x052E, r24

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1ab0:	8c e2       	ldi	r24, 0x2C	; 44
    1ab2:	9b e1       	ldi	r25, 0x1B	; 27
    1ab4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
            }
            
            
            driveDistanceInCM(80);
            
            stopTimeMs(500);
    1ab8:	84 ef       	ldi	r24, 0xF4	; 244
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
            
            // turn 90 degrees left
            turnDegreesGyro(50, LEFT);
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	82 e3       	ldi	r24, 0x32	; 50
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 1f 09 	call	0x123e	; 0x123e <turnDegreesGyro>
            //            turn90degreesEncoder(LEFT);
            
            wallStateMessage = 0;
    1acc:	10 92 2f 05 	sts	0x052F, r1
    1ad0:	10 92 2e 05 	sts	0x052E, r1
            wall_state = THIRD;
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	80 93 2a 05 	sts	0x052A, r24
            
            //            break;
            
        case THIRD:
            if (wallStateMessage == 0)
    1ada:	80 91 2e 05 	lds	r24, 0x052E
    1ade:	90 91 2f 05 	lds	r25, 0x052F
    1ae2:	89 2b       	or	r24, r25
    1ae4:	59 f4       	brne	.+22     	; 0x1afc <followWallStateMachine+0x138>
            {
                sendUartToInterface('C', "SW4");
    1ae6:	62 ec       	ldi	r22, 0xC2	; 194
    1ae8:	74 e0       	ldi	r23, 0x04	; 4
    1aea:	83 e4       	ldi	r24, 0x43	; 67
    1aec:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                wallStateMessage = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	90 93 2f 05 	sts	0x052F, r25
    1af8:	80 93 2e 05 	sts	0x052E, r24

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1afc:	84 e1       	ldi	r24, 0x14	; 20
    1afe:	96 e1       	ldi	r25, 0x16	; 22
    1b00:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
            
            // drive at bit forward to align to wall
            driveDistanceInCM(65);
            
            
            stopTimeMs(500);
    1b04:	84 ef       	ldi	r24, 0xF4	; 244
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
            
            // turn 90 degrees right
            //            turnDegreesGyro(0, RIGHT);
            turnSomeDegreesEncoder(RIGHT, 2500);
    1b0c:	64 ec       	ldi	r22, 0xC4	; 196
    1b0e:	79 e0       	ldi	r23, 0x09	; 9
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 c9 09 	call	0x1392	; 0x1392 <turnSomeDegreesEncoder>
            //            turn90degreesEncoder(RIGHT);
            
            wallStateMessage = 0;
    1b18:	10 92 2f 05 	sts	0x052F, r1
    1b1c:	10 92 2e 05 	sts	0x052E, r1
            wall_state = FOURTH;
    1b20:	84 e0       	ldi	r24, 0x04	; 4
    1b22:	80 93 2a 05 	sts	0x052A, r24
            
            //            break;
            
        case FOURTH:
            if (wallStateMessage == 0)
    1b26:	80 91 2e 05 	lds	r24, 0x052E
    1b2a:	90 91 2f 05 	lds	r25, 0x052F
    1b2e:	89 2b       	or	r24, r25
    1b30:	59 f4       	brne	.+22     	; 0x1b48 <followWallStateMachine+0x184>
            {
                sendUartToInterface('C', "SW5");
    1b32:	66 ec       	ldi	r22, 0xC6	; 198
    1b34:	74 e0       	ldi	r23, 0x04	; 4
    1b36:	83 e4       	ldi	r24, 0x43	; 67
    1b38:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                wallStateMessage = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	90 93 2f 05 	sts	0x052F, r25
    1b44:	80 93 2e 05 	sts	0x052E, r24

void driveDistanceInCM(int cm)
{
    int encoderValue = (cm*10)/0.115;
    
    driveDistanceEncoder(encoderValue);
    1b48:	86 ec       	ldi	r24, 0xC6	; 198
    1b4a:	97 e1       	ldi	r25, 0x17	; 23
    1b4c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
                wallStateMessage = 1;
            }
            
            driveDistanceInCM(70);
            
            stopTimeMs(500);
    1b50:	84 ef       	ldi	r24, 0xF4	; 244
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
            
            wallStateMessage = 0;
    1b58:	10 92 2f 05 	sts	0x052F, r1
    1b5c:	10 92 2e 05 	sts	0x052E, r1
            wall_state = STOP;
    1b60:	85 e0       	ldi	r24, 0x05	; 5
    1b62:	80 93 2a 05 	sts	0x052A, r24
            
            //            break;
            
        case STOP:
            if (wallStateMessage == 0)
    1b66:	80 91 2e 05 	lds	r24, 0x052E
    1b6a:	90 91 2f 05 	lds	r25, 0x052F
    1b6e:	89 2b       	or	r24, r25
    1b70:	59 f4       	brne	.+22     	; 0x1b88 <followWallStateMachine+0x1c4>
            {
                sendUartToInterface('C', "SW6");
    1b72:	6a ec       	ldi	r22, 0xCA	; 202
    1b74:	74 e0       	ldi	r23, 0x04	; 4
    1b76:	83 e4       	ldi	r24, 0x43	; 67
    1b78:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
                wallStateMessage = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	90 93 2f 05 	sts	0x052F, r25
    1b84:	80 93 2e 05 	sts	0x052E, r24
            }
            
            // the end
            stop();
    1b88:	0e 94 8d 05 	call	0xb1a	; 0xb1a <stop>
            wallStateMessage = 0;
    1b8c:	10 92 2f 05 	sts	0x052F, r1
    1b90:	10 92 2e 05 	sts	0x052E, r1
    1b94:	08 95       	ret

00001b96 <mainState>:
    1b96:	80 91 2b 05 	lds	r24, 0x052B
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	88 30       	cpi	r24, 0x08	; 8
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <mainState+0xe>
    1ba2:	9a c1       	rjmp	.+820    	; 0x1ed8 <mainState+0x342>
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	ea 58       	subi	r30, 0x8A	; 138
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 91 2c 05 	lds	r24, 0x052C
    1bae:	90 91 2d 05 	lds	r25, 0x052D
    1bb2:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__tablejump2__>
    1bb6:	89 2b       	or	r24, r25
    1bb8:	59 f4       	brne	.+22     	; 0x1bd0 <mainState+0x3a>
    1bba:	6e ec       	ldi	r22, 0xCE	; 206
    1bbc:	74 e0       	ldi	r23, 0x04	; 4
    1bbe:	83 e4       	ldi	r24, 0x43	; 67
    1bc0:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	90 93 2d 05 	sts	0x052D, r25
    1bcc:	80 93 2c 05 	sts	0x052C, r24
    1bd0:	80 91 30 05 	lds	r24, 0x0530
    1bd4:	90 91 31 05 	lds	r25, 0x0531
    1bd8:	89 2b       	or	r24, r25
    1bda:	51 f4       	brne	.+20     	; 0x1bf0 <mainState+0x5a>
    1bdc:	8b ec       	ldi	r24, 0xCB	; 203
    1bde:	96 e0       	ldi	r25, 0x06	; 6
    1be0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	90 93 31 05 	sts	0x0531, r25
    1bec:	80 93 30 05 	sts	0x0530, r24
    1bf0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <findLine>
    1bf4:	80 91 36 05 	lds	r24, 0x0536
    1bf8:	90 91 37 05 	lds	r25, 0x0537
    1bfc:	89 2b       	or	r24, r25
    1bfe:	99 f0       	breq	.+38     	; 0x1c26 <mainState+0x90>
    1c00:	84 ef       	ldi	r24, 0xF4	; 244
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <turnToLine>
    1c10:	84 ef       	ldi	r24, 0xF4	; 244
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    1c18:	10 92 2d 05 	sts	0x052D, r1
    1c1c:	10 92 2c 05 	sts	0x052C, r1
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 2b 05 	sts	0x052B, r24
    1c26:	10 92 37 05 	sts	0x0537, r1
    1c2a:	10 92 36 05 	sts	0x0536, r1
    1c2e:	08 95       	ret
    1c30:	89 2b       	or	r24, r25
    1c32:	59 f4       	brne	.+22     	; 0x1c4a <mainState+0xb4>
    1c34:	61 ed       	ldi	r22, 0xD1	; 209
    1c36:	74 e0       	ldi	r23, 0x04	; 4
    1c38:	83 e4       	ldi	r24, 0x43	; 67
    1c3a:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	90 93 2d 05 	sts	0x052D, r25
    1c46:	80 93 2c 05 	sts	0x052C, r24
    1c4a:	0e 94 bd 08 	call	0x117a	; 0x117a <followLine>
    1c4e:	80 91 48 05 	lds	r24, 0x0548
    1c52:	90 91 49 05 	lds	r25, 0x0549
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <mainState+0xd2>
    1c5a:	80 91 48 05 	lds	r24, 0x0548
    1c5e:	90 91 49 05 	lds	r25, 0x0549
    1c62:	03 97       	sbiw	r24, 0x03	; 3
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <mainState+0xd2>
    1c66:	38 c1       	rjmp	.+624    	; 0x1ed8 <mainState+0x342>
    1c68:	8c e5       	ldi	r24, 0x5C	; 92
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    1c70:	80 91 15 05 	lds	r24, 0x0515
    1c74:	88 23       	and	r24, r24
    1c76:	e1 f3       	breq	.-8      	; 0x1c70 <mainState+0xda>
    1c78:	0e 94 bd 08 	call	0x117a	; 0x117a <followLine>
    1c7c:	10 92 2d 05 	sts	0x052D, r1
    1c80:	10 92 2c 05 	sts	0x052C, r1
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	17 c1       	rjmp	.+558    	; 0x1eb6 <mainState+0x320>
    1c88:	89 2b       	or	r24, r25
    1c8a:	59 f4       	brne	.+22     	; 0x1ca2 <mainState+0x10c>
    1c8c:	64 ed       	ldi	r22, 0xD4	; 212
    1c8e:	74 e0       	ldi	r23, 0x04	; 4
    1c90:	83 e4       	ldi	r24, 0x43	; 67
    1c92:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	90 93 2d 05 	sts	0x052D, r25
    1c9e:	80 93 2c 05 	sts	0x052C, r24
    1ca2:	0e 94 22 07 	call	0xe44	; 0xe44 <getCountNoLine>
    1ca6:	90 93 4b 05 	sts	0x054B, r25
    1caa:	80 93 4a 05 	sts	0x054A, r24
    1cae:	80 91 4a 05 	lds	r24, 0x054A
    1cb2:	90 91 4b 05 	lds	r25, 0x054B
    1cb6:	4a e0       	ldi	r20, 0x0A	; 10
    1cb8:	63 ef       	ldi	r22, 0xF3	; 243
    1cba:	75 e0       	ldi	r23, 0x05	; 5
    1cbc:	0e 94 07 11 	call	0x220e	; 0x220e <__itoa_ncheck>
    1cc0:	83 ef       	ldi	r24, 0xF3	; 243
    1cc2:	95 e0       	ldi	r25, 0x05	; 5
    1cc4:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
    1cc8:	8e ef       	ldi	r24, 0xFE	; 254
    1cca:	94 e0       	ldi	r25, 0x04	; 4
    1ccc:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
    1cd0:	0e 94 bd 08 	call	0x117a	; 0x117a <followLine>
    1cd4:	80 91 4a 05 	lds	r24, 0x054A
    1cd8:	90 91 4b 05 	lds	r25, 0x054B
    1cdc:	44 97       	sbiw	r24, 0x14	; 20
    1cde:	84 f0       	brlt	.+32     	; 0x1d00 <mainState+0x16a>
    1ce0:	87 ed       	ldi	r24, 0xD7	; 215
    1ce2:	94 e0       	ldi	r25, 0x04	; 4
    1ce4:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
    1ce8:	60 91 06 02 	lds	r22, 0x0206
    1cec:	70 91 07 02 	lds	r23, 0x0207
    1cf0:	8d e0       	ldi	r24, 0x0D	; 13
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 a9 03 	call	0x752	; 0x752 <drive>
    1cf8:	10 92 4b 05 	sts	0x054B, r1
    1cfc:	10 92 4a 05 	sts	0x054A, r1
    1d00:	80 91 48 05 	lds	r24, 0x0548
    1d04:	90 91 49 05 	lds	r25, 0x0549
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	39 f0       	breq	.+14     	; 0x1d1a <mainState+0x184>
    1d0c:	80 91 48 05 	lds	r24, 0x0548
    1d10:	90 91 49 05 	lds	r25, 0x0549
    1d14:	03 97       	sbiw	r24, 0x03	; 3
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <mainState+0x184>
    1d18:	df c0       	rjmp	.+446    	; 0x1ed8 <mainState+0x342>
    1d1a:	82 ee       	ldi	r24, 0xE2	; 226
    1d1c:	94 e0       	ldi	r25, 0x04	; 4
    1d1e:	0e 94 d2 05 	call	0xba4	; 0xba4 <uart_puts>
    1d22:	0e 94 bd 08 	call	0x117a	; 0x117a <followLine>
    1d26:	10 92 4b 05 	sts	0x054B, r1
    1d2a:	10 92 4a 05 	sts	0x054A, r1
    1d2e:	10 92 2d 05 	sts	0x052D, r1
    1d32:	10 92 2c 05 	sts	0x052C, r1
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	be c0       	rjmp	.+380    	; 0x1eb6 <mainState+0x320>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	59 f4       	brne	.+22     	; 0x1d54 <mainState+0x1be>
    1d3e:	6f ee       	ldi	r22, 0xEF	; 239
    1d40:	74 e0       	ldi	r23, 0x04	; 4
    1d42:	83 e4       	ldi	r24, 0x43	; 67
    1d44:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	90 93 2d 05 	sts	0x052D, r25
    1d50:	80 93 2c 05 	sts	0x052C, r24
    1d54:	0e 94 bd 08 	call	0x117a	; 0x117a <followLine>
    1d58:	80 91 48 05 	lds	r24, 0x0548
    1d5c:	90 91 49 05 	lds	r25, 0x0549
    1d60:	0f 97       	sbiw	r24, 0x0f	; 15
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <mainState+0x1e6>
    1d64:	80 91 48 05 	lds	r24, 0x0548
    1d68:	90 91 49 05 	lds	r25, 0x0549
    1d6c:	07 97       	sbiw	r24, 0x07	; 7
    1d6e:	31 f0       	breq	.+12     	; 0x1d7c <mainState+0x1e6>
    1d70:	80 91 48 05 	lds	r24, 0x0548
    1d74:	90 91 49 05 	lds	r25, 0x0549
    1d78:	0e 97       	sbiw	r24, 0x0e	; 14
    1d7a:	31 f4       	brne	.+12     	; 0x1d88 <mainState+0x1f2>
    1d7c:	88 ee       	ldi	r24, 0xE8	; 232
    1d7e:	93 e0       	ldi	r25, 0x03	; 3
    1d80:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    1d84:	0e 94 96 0a 	call	0x152c	; 0x152c <octagon>
    1d88:	80 91 34 05 	lds	r24, 0x0534
    1d8c:	90 91 35 05 	lds	r25, 0x0535
    1d90:	89 2b       	or	r24, r25
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <mainState+0x200>
    1d94:	a1 c0       	rjmp	.+322    	; 0x1ed8 <mainState+0x342>
    1d96:	10 92 2d 05 	sts	0x052D, r1
    1d9a:	10 92 2c 05 	sts	0x052C, r1
    1d9e:	84 e0       	ldi	r24, 0x04	; 4
    1da0:	8a c0       	rjmp	.+276    	; 0x1eb6 <mainState+0x320>
    1da2:	89 2b       	or	r24, r25
    1da4:	59 f4       	brne	.+22     	; 0x1dbc <mainState+0x226>
    1da6:	62 ef       	ldi	r22, 0xF2	; 242
    1da8:	74 e0       	ldi	r23, 0x04	; 4
    1daa:	83 e4       	ldi	r24, 0x43	; 67
    1dac:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	90 93 2d 05 	sts	0x052D, r25
    1db8:	80 93 2c 05 	sts	0x052C, r24
    1dbc:	0e 94 bd 08 	call	0x117a	; 0x117a <followLine>
    1dc0:	80 91 48 05 	lds	r24, 0x0548
    1dc4:	90 91 49 05 	lds	r25, 0x0549
    1dc8:	03 97       	sbiw	r24, 0x03	; 3
    1dca:	31 f0       	breq	.+12     	; 0x1dd8 <mainState+0x242>
    1dcc:	80 91 48 05 	lds	r24, 0x0548
    1dd0:	90 91 49 05 	lds	r25, 0x0549
    1dd4:	07 97       	sbiw	r24, 0x07	; 7
    1dd6:	e9 f4       	brne	.+58     	; 0x1e12 <mainState+0x27c>
    1dd8:	80 91 32 05 	lds	r24, 0x0532
    1ddc:	90 91 33 05 	lds	r25, 0x0533
    1de0:	89 2b       	or	r24, r25
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <mainState+0x250>
    1de4:	79 c0       	rjmp	.+242    	; 0x1ed8 <mainState+0x342>
    1de6:	65 ef       	ldi	r22, 0xF5	; 245
    1de8:	74 e0       	ldi	r23, 0x04	; 4
    1dea:	83 e4       	ldi	r24, 0x43	; 67
    1dec:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1df0:	83 eb       	ldi	r24, 0xB3	; 179
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <driveDistanceEncoder>
    1df8:	84 eb       	ldi	r24, 0xB4	; 180
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	90 93 07 02 	sts	0x0207, r25
    1e00:	80 93 06 02 	sts	0x0206, r24
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	90 93 33 05 	sts	0x0533, r25
    1e0c:	80 93 32 05 	sts	0x0532, r24
    1e10:	08 95       	ret
    1e12:	80 91 48 05 	lds	r24, 0x0548
    1e16:	90 91 49 05 	lds	r25, 0x0549
    1e1a:	0f 97       	sbiw	r24, 0x0f	; 15
    1e1c:	69 f0       	breq	.+26     	; 0x1e38 <mainState+0x2a2>
    1e1e:	80 91 48 05 	lds	r24, 0x0548
    1e22:	90 91 49 05 	lds	r25, 0x0549
    1e26:	07 97       	sbiw	r24, 0x07	; 7
    1e28:	39 f0       	breq	.+14     	; 0x1e38 <mainState+0x2a2>
    1e2a:	80 91 48 05 	lds	r24, 0x0548
    1e2e:	90 91 49 05 	lds	r25, 0x0549
    1e32:	0e 97       	sbiw	r24, 0x0e	; 14
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <mainState+0x2a2>
    1e36:	50 c0       	rjmp	.+160    	; 0x1ed8 <mainState+0x342>
    1e38:	10 92 2d 05 	sts	0x052D, r1
    1e3c:	10 92 2c 05 	sts	0x052C, r1
    1e40:	85 e0       	ldi	r24, 0x05	; 5
    1e42:	39 c0       	rjmp	.+114    	; 0x1eb6 <mainState+0x320>
    1e44:	89 2b       	or	r24, r25
    1e46:	59 f4       	brne	.+22     	; 0x1e5e <mainState+0x2c8>
    1e48:	6a ef       	ldi	r22, 0xFA	; 250
    1e4a:	74 e0       	ldi	r23, 0x04	; 4
    1e4c:	83 e4       	ldi	r24, 0x43	; 67
    1e4e:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	90 93 2d 05 	sts	0x052D, r25
    1e5a:	80 93 2c 05 	sts	0x052C, r24
    1e5e:	54 9a       	sbi	0x0a, 4	; 10
    1e60:	5c 98       	cbi	0x0b, 4	; 11
    1e62:	8f e1       	ldi	r24, 0x1F	; 31
    1e64:	8a 95       	dec	r24
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <mainState+0x2ce>
    1e68:	5c 9a       	sbi	0x0b, 4	; 11
    1e6a:	88 ee       	ldi	r24, 0xE8	; 232
    1e6c:	93 e0       	ldi	r25, 0x03	; 3
    1e6e:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    1e72:	8d ef       	ldi	r24, 0xFD	; 253
    1e74:	94 e0       	ldi	r25, 0x04	; 4
    1e76:	0e 94 fe 05 	call	0xbfc	; 0xbfc <uart1_puts>
    1e7a:	80 ed       	ldi	r24, 0xD0	; 208
    1e7c:	97 e0       	ldi	r25, 0x07	; 7
    1e7e:	0e 94 a9 08 	call	0x1152	; 0x1152 <stopTimeMs>
    1e82:	10 92 2d 05 	sts	0x052D, r1
    1e86:	10 92 2c 05 	sts	0x052C, r1
    1e8a:	86 e0       	ldi	r24, 0x06	; 6
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <mainState+0x320>
    1e8e:	89 2b       	or	r24, r25
    1e90:	59 f4       	brne	.+22     	; 0x1ea8 <mainState+0x312>
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	75 e0       	ldi	r23, 0x05	; 5
    1e96:	83 e4       	ldi	r24, 0x43	; 67
    1e98:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	90 93 2d 05 	sts	0x052D, r25
    1ea4:	80 93 2c 05 	sts	0x052C, r24
    1ea8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <followWallStateMachine>
    1eac:	10 92 2d 05 	sts	0x052D, r1
    1eb0:	10 92 2c 05 	sts	0x052C, r1
    1eb4:	87 e0       	ldi	r24, 0x07	; 7
    1eb6:	80 93 2b 05 	sts	0x052B, r24
    1eba:	08 95       	ret
    1ebc:	89 2b       	or	r24, r25
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <mainState+0x336>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	90 93 2d 05 	sts	0x052D, r25
    1ec8:	80 93 2c 05 	sts	0x052C, r24
    1ecc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <stop>
    1ed0:	10 92 2d 05 	sts	0x052D, r1
    1ed4:	10 92 2c 05 	sts	0x052C, r1
    1ed8:	08 95       	ret

00001eda <main>:


int main(void) {
	
    
    UCSR1B |= (1<<RXCIE1);  // Enable uart1 interrupts
    1eda:	80 91 c9 00 	lds	r24, 0x00C9
    1ede:	80 68       	ori	r24, 0x80	; 128
    1ee0:	80 93 c9 00 	sts	0x00C9, r24
    
    // Initialize
    init();
    1ee4:	0e 94 27 07 	call	0xe4e	; 0xe4e <init>
    sendUartToInterface('H', "TankBot initialized");
    1ee8:	6a ed       	ldi	r22, 0xDA	; 218
    1eea:	72 e0       	ldi	r23, 0x02	; 2
    1eec:	88 e4       	ldi	r24, 0x48	; 72
    1eee:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    sendUartToInterface('H', "Press \"Start\"");
    1ef2:	6e ee       	ldi	r22, 0xEE	; 238
    1ef4:	72 e0       	ldi	r23, 0x02	; 2
    1ef6:	88 e4       	ldi	r24, 0x48	; 72
    1ef8:	0e 94 17 08 	call	0x102e	; 0x102e <sendUartToInterface>
    
    // Enable global interrupts
    sei();
    1efc:	78 94       	sei
    
    
    
	while (1) {
       
        if (startFlag == 1)
    1efe:	80 91 22 05 	lds	r24, 0x0522
    1f02:	90 91 23 05 	lds	r25, 0x0523
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	19 f4       	brne	.+6      	; 0x1f10 <main+0x36>
//                
//                            drive(0, 180);
//                        }

                
            mainState();
    1f0a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <mainState>
    1f0e:	f7 cf       	rjmp	.-18     	; 0x1efe <main+0x24>
        }
        else
        {
            stop();
    1f10:	0e 94 8d 05 	call	0xb1a	; 0xb1a <stop>
    1f14:	f4 cf       	rjmp	.-24     	; 0x1efe <main+0x24>

00001f16 <__divsf3>:
    1f16:	0c d0       	rcall	.+24     	; 0x1f30 <__divsf3x>
    1f18:	eb c0       	rjmp	.+470    	; 0x20f0 <__fp_round>
    1f1a:	e3 d0       	rcall	.+454    	; 0x20e2 <__fp_pscB>
    1f1c:	40 f0       	brcs	.+16     	; 0x1f2e <__divsf3+0x18>
    1f1e:	da d0       	rcall	.+436    	; 0x20d4 <__fp_pscA>
    1f20:	30 f0       	brcs	.+12     	; 0x1f2e <__divsf3+0x18>
    1f22:	21 f4       	brne	.+8      	; 0x1f2c <__divsf3+0x16>
    1f24:	5f 3f       	cpi	r21, 0xFF	; 255
    1f26:	19 f0       	breq	.+6      	; 0x1f2e <__divsf3+0x18>
    1f28:	cc c0       	rjmp	.+408    	; 0x20c2 <__fp_inf>
    1f2a:	51 11       	cpse	r21, r1
    1f2c:	15 c1       	rjmp	.+554    	; 0x2158 <__fp_szero>
    1f2e:	cf c0       	rjmp	.+414    	; 0x20ce <__fp_nan>

00001f30 <__divsf3x>:
    1f30:	f0 d0       	rcall	.+480    	; 0x2112 <__fp_split3>
    1f32:	98 f3       	brcs	.-26     	; 0x1f1a <__divsf3+0x4>

00001f34 <__divsf3_pse>:
    1f34:	99 23       	and	r25, r25
    1f36:	c9 f3       	breq	.-14     	; 0x1f2a <__divsf3+0x14>
    1f38:	55 23       	and	r21, r21
    1f3a:	b1 f3       	breq	.-20     	; 0x1f28 <__divsf3+0x12>
    1f3c:	95 1b       	sub	r25, r21
    1f3e:	55 0b       	sbc	r21, r21
    1f40:	bb 27       	eor	r27, r27
    1f42:	aa 27       	eor	r26, r26
    1f44:	62 17       	cp	r22, r18
    1f46:	73 07       	cpc	r23, r19
    1f48:	84 07       	cpc	r24, r20
    1f4a:	38 f0       	brcs	.+14     	; 0x1f5a <__divsf3_pse+0x26>
    1f4c:	9f 5f       	subi	r25, 0xFF	; 255
    1f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f50:	22 0f       	add	r18, r18
    1f52:	33 1f       	adc	r19, r19
    1f54:	44 1f       	adc	r20, r20
    1f56:	aa 1f       	adc	r26, r26
    1f58:	a9 f3       	breq	.-22     	; 0x1f44 <__divsf3_pse+0x10>
    1f5a:	33 d0       	rcall	.+102    	; 0x1fc2 <__divsf3_pse+0x8e>
    1f5c:	0e 2e       	mov	r0, r30
    1f5e:	3a f0       	brmi	.+14     	; 0x1f6e <__divsf3_pse+0x3a>
    1f60:	e0 e8       	ldi	r30, 0x80	; 128
    1f62:	30 d0       	rcall	.+96     	; 0x1fc4 <__divsf3_pse+0x90>
    1f64:	91 50       	subi	r25, 0x01	; 1
    1f66:	50 40       	sbci	r21, 0x00	; 0
    1f68:	e6 95       	lsr	r30
    1f6a:	00 1c       	adc	r0, r0
    1f6c:	ca f7       	brpl	.-14     	; 0x1f60 <__divsf3_pse+0x2c>
    1f6e:	29 d0       	rcall	.+82     	; 0x1fc2 <__divsf3_pse+0x8e>
    1f70:	fe 2f       	mov	r31, r30
    1f72:	27 d0       	rcall	.+78     	; 0x1fc2 <__divsf3_pse+0x8e>
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	bb 1f       	adc	r27, r27
    1f7c:	26 17       	cp	r18, r22
    1f7e:	37 07       	cpc	r19, r23
    1f80:	48 07       	cpc	r20, r24
    1f82:	ab 07       	cpc	r26, r27
    1f84:	b0 e8       	ldi	r27, 0x80	; 128
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <__divsf3_pse+0x56>
    1f88:	bb 0b       	sbc	r27, r27
    1f8a:	80 2d       	mov	r24, r0
    1f8c:	bf 01       	movw	r22, r30
    1f8e:	ff 27       	eor	r31, r31
    1f90:	93 58       	subi	r25, 0x83	; 131
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	2a f0       	brmi	.+10     	; 0x1fa0 <__divsf3_pse+0x6c>
    1f96:	9e 3f       	cpi	r25, 0xFE	; 254
    1f98:	51 05       	cpc	r21, r1
    1f9a:	68 f0       	brcs	.+26     	; 0x1fb6 <__divsf3_pse+0x82>
    1f9c:	92 c0       	rjmp	.+292    	; 0x20c2 <__fp_inf>
    1f9e:	dc c0       	rjmp	.+440    	; 0x2158 <__fp_szero>
    1fa0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa2:	ec f3       	brlt	.-6      	; 0x1f9e <__divsf3_pse+0x6a>
    1fa4:	98 3e       	cpi	r25, 0xE8	; 232
    1fa6:	dc f3       	brlt	.-10     	; 0x1f9e <__divsf3_pse+0x6a>
    1fa8:	86 95       	lsr	r24
    1faa:	77 95       	ror	r23
    1fac:	67 95       	ror	r22
    1fae:	b7 95       	ror	r27
    1fb0:	f7 95       	ror	r31
    1fb2:	9f 5f       	subi	r25, 0xFF	; 255
    1fb4:	c9 f7       	brne	.-14     	; 0x1fa8 <__divsf3_pse+0x74>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	91 1d       	adc	r25, r1
    1fba:	96 95       	lsr	r25
    1fbc:	87 95       	ror	r24
    1fbe:	97 f9       	bld	r25, 7
    1fc0:	08 95       	ret
    1fc2:	e1 e0       	ldi	r30, 0x01	; 1
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	62 17       	cp	r22, r18
    1fce:	73 07       	cpc	r23, r19
    1fd0:	84 07       	cpc	r24, r20
    1fd2:	ba 07       	cpc	r27, r26
    1fd4:	20 f0       	brcs	.+8      	; 0x1fde <__divsf3_pse+0xaa>
    1fd6:	62 1b       	sub	r22, r18
    1fd8:	73 0b       	sbc	r23, r19
    1fda:	84 0b       	sbc	r24, r20
    1fdc:	ba 0b       	sbc	r27, r26
    1fde:	ee 1f       	adc	r30, r30
    1fe0:	88 f7       	brcc	.-30     	; 0x1fc4 <__divsf3_pse+0x90>
    1fe2:	e0 95       	com	r30
    1fe4:	08 95       	ret

00001fe6 <__fixsfsi>:
    1fe6:	04 d0       	rcall	.+8      	; 0x1ff0 <__fixunssfsi>
    1fe8:	68 94       	set
    1fea:	b1 11       	cpse	r27, r1
    1fec:	b5 c0       	rjmp	.+362    	; 0x2158 <__fp_szero>
    1fee:	08 95       	ret

00001ff0 <__fixunssfsi>:
    1ff0:	98 d0       	rcall	.+304    	; 0x2122 <__fp_splitA>
    1ff2:	88 f0       	brcs	.+34     	; 0x2016 <__fixunssfsi+0x26>
    1ff4:	9f 57       	subi	r25, 0x7F	; 127
    1ff6:	90 f0       	brcs	.+36     	; 0x201c <__fixunssfsi+0x2c>
    1ff8:	b9 2f       	mov	r27, r25
    1ffa:	99 27       	eor	r25, r25
    1ffc:	b7 51       	subi	r27, 0x17	; 23
    1ffe:	a0 f0       	brcs	.+40     	; 0x2028 <__fixunssfsi+0x38>
    2000:	d1 f0       	breq	.+52     	; 0x2036 <__fixunssfsi+0x46>
    2002:	66 0f       	add	r22, r22
    2004:	77 1f       	adc	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	1a f0       	brmi	.+6      	; 0x2012 <__fixunssfsi+0x22>
    200c:	ba 95       	dec	r27
    200e:	c9 f7       	brne	.-14     	; 0x2002 <__fixunssfsi+0x12>
    2010:	12 c0       	rjmp	.+36     	; 0x2036 <__fixunssfsi+0x46>
    2012:	b1 30       	cpi	r27, 0x01	; 1
    2014:	81 f0       	breq	.+32     	; 0x2036 <__fixunssfsi+0x46>
    2016:	9f d0       	rcall	.+318    	; 0x2156 <__fp_zero>
    2018:	b1 e0       	ldi	r27, 0x01	; 1
    201a:	08 95       	ret
    201c:	9c c0       	rjmp	.+312    	; 0x2156 <__fp_zero>
    201e:	67 2f       	mov	r22, r23
    2020:	78 2f       	mov	r23, r24
    2022:	88 27       	eor	r24, r24
    2024:	b8 5f       	subi	r27, 0xF8	; 248
    2026:	39 f0       	breq	.+14     	; 0x2036 <__fixunssfsi+0x46>
    2028:	b9 3f       	cpi	r27, 0xF9	; 249
    202a:	cc f3       	brlt	.-14     	; 0x201e <__fixunssfsi+0x2e>
    202c:	86 95       	lsr	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b3 95       	inc	r27
    2034:	d9 f7       	brne	.-10     	; 0x202c <__fixunssfsi+0x3c>
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__fixunssfsi+0x56>
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	08 95       	ret

00002048 <__floatunsisf>:
    2048:	e8 94       	clt
    204a:	09 c0       	rjmp	.+18     	; 0x205e <__floatsisf+0x12>

0000204c <__floatsisf>:
    204c:	97 fb       	bst	r25, 7
    204e:	3e f4       	brtc	.+14     	; 0x205e <__floatsisf+0x12>
    2050:	90 95       	com	r25
    2052:	80 95       	com	r24
    2054:	70 95       	com	r23
    2056:	61 95       	neg	r22
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	99 23       	and	r25, r25
    2060:	a9 f0       	breq	.+42     	; 0x208c <__floatsisf+0x40>
    2062:	f9 2f       	mov	r31, r25
    2064:	96 e9       	ldi	r25, 0x96	; 150
    2066:	bb 27       	eor	r27, r27
    2068:	93 95       	inc	r25
    206a:	f6 95       	lsr	r31
    206c:	87 95       	ror	r24
    206e:	77 95       	ror	r23
    2070:	67 95       	ror	r22
    2072:	b7 95       	ror	r27
    2074:	f1 11       	cpse	r31, r1
    2076:	f8 cf       	rjmp	.-16     	; 0x2068 <__floatsisf+0x1c>
    2078:	fa f4       	brpl	.+62     	; 0x20b8 <__floatsisf+0x6c>
    207a:	bb 0f       	add	r27, r27
    207c:	11 f4       	brne	.+4      	; 0x2082 <__floatsisf+0x36>
    207e:	60 ff       	sbrs	r22, 0
    2080:	1b c0       	rjmp	.+54     	; 0x20b8 <__floatsisf+0x6c>
    2082:	6f 5f       	subi	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	16 c0       	rjmp	.+44     	; 0x20b8 <__floatsisf+0x6c>
    208c:	88 23       	and	r24, r24
    208e:	11 f0       	breq	.+4      	; 0x2094 <__floatsisf+0x48>
    2090:	96 e9       	ldi	r25, 0x96	; 150
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <__floatsisf+0x6a>
    2094:	77 23       	and	r23, r23
    2096:	21 f0       	breq	.+8      	; 0x20a0 <__floatsisf+0x54>
    2098:	9e e8       	ldi	r25, 0x8E	; 142
    209a:	87 2f       	mov	r24, r23
    209c:	76 2f       	mov	r23, r22
    209e:	05 c0       	rjmp	.+10     	; 0x20aa <__floatsisf+0x5e>
    20a0:	66 23       	and	r22, r22
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <__floatsisf+0x74>
    20a4:	96 e8       	ldi	r25, 0x86	; 134
    20a6:	86 2f       	mov	r24, r22
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	2a f0       	brmi	.+10     	; 0x20b8 <__floatsisf+0x6c>
    20ae:	9a 95       	dec	r25
    20b0:	66 0f       	add	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	da f7       	brpl	.-10     	; 0x20ae <__floatsisf+0x62>
    20b8:	88 0f       	add	r24, r24
    20ba:	96 95       	lsr	r25
    20bc:	87 95       	ror	r24
    20be:	97 f9       	bld	r25, 7
    20c0:	08 95       	ret

000020c2 <__fp_inf>:
    20c2:	97 f9       	bld	r25, 7
    20c4:	9f 67       	ori	r25, 0x7F	; 127
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	08 95       	ret

000020ce <__fp_nan>:
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	80 ec       	ldi	r24, 0xC0	; 192
    20d2:	08 95       	ret

000020d4 <__fp_pscA>:
    20d4:	00 24       	eor	r0, r0
    20d6:	0a 94       	dec	r0
    20d8:	16 16       	cp	r1, r22
    20da:	17 06       	cpc	r1, r23
    20dc:	18 06       	cpc	r1, r24
    20de:	09 06       	cpc	r0, r25
    20e0:	08 95       	ret

000020e2 <__fp_pscB>:
    20e2:	00 24       	eor	r0, r0
    20e4:	0a 94       	dec	r0
    20e6:	12 16       	cp	r1, r18
    20e8:	13 06       	cpc	r1, r19
    20ea:	14 06       	cpc	r1, r20
    20ec:	05 06       	cpc	r0, r21
    20ee:	08 95       	ret

000020f0 <__fp_round>:
    20f0:	09 2e       	mov	r0, r25
    20f2:	03 94       	inc	r0
    20f4:	00 0c       	add	r0, r0
    20f6:	11 f4       	brne	.+4      	; 0x20fc <__fp_round+0xc>
    20f8:	88 23       	and	r24, r24
    20fa:	52 f0       	brmi	.+20     	; 0x2110 <__fp_round+0x20>
    20fc:	bb 0f       	add	r27, r27
    20fe:	40 f4       	brcc	.+16     	; 0x2110 <__fp_round+0x20>
    2100:	bf 2b       	or	r27, r31
    2102:	11 f4       	brne	.+4      	; 0x2108 <__fp_round+0x18>
    2104:	60 ff       	sbrs	r22, 0
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <__fp_round+0x20>
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	8f 4f       	sbci	r24, 0xFF	; 255
    210e:	9f 4f       	sbci	r25, 0xFF	; 255
    2110:	08 95       	ret

00002112 <__fp_split3>:
    2112:	57 fd       	sbrc	r21, 7
    2114:	90 58       	subi	r25, 0x80	; 128
    2116:	44 0f       	add	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	59 f0       	breq	.+22     	; 0x2132 <__fp_splitA+0x10>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	71 f0       	breq	.+28     	; 0x213c <__fp_splitA+0x1a>
    2120:	47 95       	ror	r20

00002122 <__fp_splitA>:
    2122:	88 0f       	add	r24, r24
    2124:	97 fb       	bst	r25, 7
    2126:	99 1f       	adc	r25, r25
    2128:	61 f0       	breq	.+24     	; 0x2142 <__fp_splitA+0x20>
    212a:	9f 3f       	cpi	r25, 0xFF	; 255
    212c:	79 f0       	breq	.+30     	; 0x214c <__fp_splitA+0x2a>
    212e:	87 95       	ror	r24
    2130:	08 95       	ret
    2132:	12 16       	cp	r1, r18
    2134:	13 06       	cpc	r1, r19
    2136:	14 06       	cpc	r1, r20
    2138:	55 1f       	adc	r21, r21
    213a:	f2 cf       	rjmp	.-28     	; 0x2120 <__fp_split3+0xe>
    213c:	46 95       	lsr	r20
    213e:	f1 df       	rcall	.-30     	; 0x2122 <__fp_splitA>
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <__fp_splitA+0x30>
    2142:	16 16       	cp	r1, r22
    2144:	17 06       	cpc	r1, r23
    2146:	18 06       	cpc	r1, r24
    2148:	99 1f       	adc	r25, r25
    214a:	f1 cf       	rjmp	.-30     	; 0x212e <__fp_splitA+0xc>
    214c:	86 95       	lsr	r24
    214e:	71 05       	cpc	r23, r1
    2150:	61 05       	cpc	r22, r1
    2152:	08 94       	sec
    2154:	08 95       	ret

00002156 <__fp_zero>:
    2156:	e8 94       	clt

00002158 <__fp_szero>:
    2158:	bb 27       	eor	r27, r27
    215a:	66 27       	eor	r22, r22
    215c:	77 27       	eor	r23, r23
    215e:	cb 01       	movw	r24, r22
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret

00002164 <__udivmodsi4>:
    2164:	a1 e2       	ldi	r26, 0x21	; 33
    2166:	1a 2e       	mov	r1, r26
    2168:	aa 1b       	sub	r26, r26
    216a:	bb 1b       	sub	r27, r27
    216c:	fd 01       	movw	r30, r26
    216e:	0d c0       	rjmp	.+26     	; 0x218a <__udivmodsi4_ep>

00002170 <__udivmodsi4_loop>:
    2170:	aa 1f       	adc	r26, r26
    2172:	bb 1f       	adc	r27, r27
    2174:	ee 1f       	adc	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	a2 17       	cp	r26, r18
    217a:	b3 07       	cpc	r27, r19
    217c:	e4 07       	cpc	r30, r20
    217e:	f5 07       	cpc	r31, r21
    2180:	20 f0       	brcs	.+8      	; 0x218a <__udivmodsi4_ep>
    2182:	a2 1b       	sub	r26, r18
    2184:	b3 0b       	sbc	r27, r19
    2186:	e4 0b       	sbc	r30, r20
    2188:	f5 0b       	sbc	r31, r21

0000218a <__udivmodsi4_ep>:
    218a:	66 1f       	adc	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	88 1f       	adc	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	1a 94       	dec	r1
    2194:	69 f7       	brne	.-38     	; 0x2170 <__udivmodsi4_loop>
    2196:	60 95       	com	r22
    2198:	70 95       	com	r23
    219a:	80 95       	com	r24
    219c:	90 95       	com	r25
    219e:	9b 01       	movw	r18, r22
    21a0:	ac 01       	movw	r20, r24
    21a2:	bd 01       	movw	r22, r26
    21a4:	cf 01       	movw	r24, r30
    21a6:	08 95       	ret

000021a8 <__tablejump2__>:
    21a8:	ee 0f       	add	r30, r30
    21aa:	ff 1f       	adc	r31, r31

000021ac <__tablejump__>:
    21ac:	05 90       	lpm	r0, Z+
    21ae:	f4 91       	lpm	r31, Z
    21b0:	e0 2d       	mov	r30, r0
    21b2:	19 94       	eijmp

000021b4 <atoi>:
    21b4:	fc 01       	movw	r30, r24
    21b6:	88 27       	eor	r24, r24
    21b8:	99 27       	eor	r25, r25
    21ba:	e8 94       	clt
    21bc:	21 91       	ld	r18, Z+
    21be:	20 32       	cpi	r18, 0x20	; 32
    21c0:	e9 f3       	breq	.-6      	; 0x21bc <atoi+0x8>
    21c2:	29 30       	cpi	r18, 0x09	; 9
    21c4:	10 f0       	brcs	.+4      	; 0x21ca <atoi+0x16>
    21c6:	2e 30       	cpi	r18, 0x0E	; 14
    21c8:	c8 f3       	brcs	.-14     	; 0x21bc <atoi+0x8>
    21ca:	2b 32       	cpi	r18, 0x2B	; 43
    21cc:	41 f0       	breq	.+16     	; 0x21de <atoi+0x2a>
    21ce:	2d 32       	cpi	r18, 0x2D	; 45
    21d0:	39 f4       	brne	.+14     	; 0x21e0 <atoi+0x2c>
    21d2:	68 94       	set
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <atoi+0x2a>
    21d6:	0e 94 12 11 	call	0x2224	; 0x2224 <__mulhi_const_10>
    21da:	82 0f       	add	r24, r18
    21dc:	91 1d       	adc	r25, r1
    21de:	21 91       	ld	r18, Z+
    21e0:	20 53       	subi	r18, 0x30	; 48
    21e2:	2a 30       	cpi	r18, 0x0A	; 10
    21e4:	c0 f3       	brcs	.-16     	; 0x21d6 <atoi+0x22>
    21e6:	1e f4       	brtc	.+6      	; 0x21ee <atoi+0x3a>
    21e8:	90 95       	com	r25
    21ea:	81 95       	neg	r24
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	08 95       	ret

000021f0 <strncpy>:
    21f0:	fb 01       	movw	r30, r22
    21f2:	dc 01       	movw	r26, r24
    21f4:	41 50       	subi	r20, 0x01	; 1
    21f6:	50 40       	sbci	r21, 0x00	; 0
    21f8:	48 f0       	brcs	.+18     	; 0x220c <__stack+0xd>
    21fa:	01 90       	ld	r0, Z+
    21fc:	0d 92       	st	X+, r0
    21fe:	00 20       	and	r0, r0
    2200:	c9 f7       	brne	.-14     	; 0x21f4 <strncpy+0x4>
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <__stack+0x7>
    2204:	1d 92       	st	X+, r1
    2206:	41 50       	subi	r20, 0x01	; 1
    2208:	50 40       	sbci	r21, 0x00	; 0
    220a:	e0 f7       	brcc	.-8      	; 0x2204 <__stack+0x5>
    220c:	08 95       	ret

0000220e <__itoa_ncheck>:
    220e:	bb 27       	eor	r27, r27
    2210:	4a 30       	cpi	r20, 0x0A	; 10
    2212:	31 f4       	brne	.+12     	; 0x2220 <__itoa_ncheck+0x12>
    2214:	99 23       	and	r25, r25
    2216:	22 f4       	brpl	.+8      	; 0x2220 <__itoa_ncheck+0x12>
    2218:	bd e2       	ldi	r27, 0x2D	; 45
    221a:	90 95       	com	r25
    221c:	81 95       	neg	r24
    221e:	9f 4f       	sbci	r25, 0xFF	; 255
    2220:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__utoa_common>

00002224 <__mulhi_const_10>:
    2224:	7a e0       	ldi	r23, 0x0A	; 10
    2226:	97 9f       	mul	r25, r23
    2228:	90 2d       	mov	r25, r0
    222a:	87 9f       	mul	r24, r23
    222c:	80 2d       	mov	r24, r0
    222e:	91 0d       	add	r25, r1
    2230:	11 24       	eor	r1, r1
    2232:	08 95       	ret

00002234 <__utoa_ncheck>:
    2234:	bb 27       	eor	r27, r27

00002236 <__utoa_common>:
    2236:	fb 01       	movw	r30, r22
    2238:	55 27       	eor	r21, r21
    223a:	aa 27       	eor	r26, r26
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	aa 1f       	adc	r26, r26
    2242:	a4 17       	cp	r26, r20
    2244:	10 f0       	brcs	.+4      	; 0x224a <__utoa_common+0x14>
    2246:	a4 1b       	sub	r26, r20
    2248:	83 95       	inc	r24
    224a:	50 51       	subi	r21, 0x10	; 16
    224c:	b9 f7       	brne	.-18     	; 0x223c <__utoa_common+0x6>
    224e:	a0 5d       	subi	r26, 0xD0	; 208
    2250:	aa 33       	cpi	r26, 0x3A	; 58
    2252:	08 f0       	brcs	.+2      	; 0x2256 <__utoa_common+0x20>
    2254:	a9 5d       	subi	r26, 0xD9	; 217
    2256:	a1 93       	st	Z+, r26
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	79 f7       	brne	.-34     	; 0x223a <__utoa_common+0x4>
    225c:	b1 11       	cpse	r27, r1
    225e:	b1 93       	st	Z+, r27
    2260:	11 92       	st	Z+, r1
    2262:	cb 01       	movw	r24, r22
    2264:	0c 94 34 11 	jmp	0x2268	; 0x2268 <strrev>

00002268 <strrev>:
    2268:	dc 01       	movw	r26, r24
    226a:	fc 01       	movw	r30, r24
    226c:	67 2f       	mov	r22, r23
    226e:	71 91       	ld	r23, Z+
    2270:	77 23       	and	r23, r23
    2272:	e1 f7       	brne	.-8      	; 0x226c <strrev+0x4>
    2274:	32 97       	sbiw	r30, 0x02	; 2
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <strrev+0x18>
    2278:	7c 91       	ld	r23, X
    227a:	6d 93       	st	X+, r22
    227c:	70 83       	st	Z, r23
    227e:	62 91       	ld	r22, -Z
    2280:	ae 17       	cp	r26, r30
    2282:	bf 07       	cpc	r27, r31
    2284:	c8 f3       	brcs	.-14     	; 0x2278 <strrev+0x10>
    2286:	08 95       	ret

00002288 <_exit>:
    2288:	f8 94       	cli

0000228a <__stop_program>:
    228a:	ff cf       	rjmp	.-2      	; 0x228a <__stop_program>
