   1               		.file	"StateMachine.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 108               		.section	.rodata.str1.1,"aMS",@progbits,1
 109               	.LC0:
 110 0000 5374 6174 		.string	"State: INIT"
 110      653A 2049 
 110      4E49 5400 
 111               	.LC1:
 112 000c 5374 6172 		.string	"Start"
 112      7400 
 113               	.LC2:
 114 0012 5374 6174 		.string	"State: FORWARD"
 114      653A 2046 
 114      4F52 5741 
 114      5244 00
 115               	.LC3:
 116 0021 5374 6174 		.string	"State: STOP"
 116      653A 2053 
 116      544F 5000 
 117               	.LC4:
 118 002d 5374 6174 		.string	"State: NUDGE_LEFT"
 118      653A 204E 
 118      5544 4745 
 118      5F4C 4546 
 118      5400 
 119               	.LC5:
 120 003f 5374 6174 		.string	"State: HARD_LEFT"
 120      653A 2048 
 120      4152 445F 
 120      4C45 4654 
 120      00
 121               	.LC6:
 122 0050 5374 6174 		.string	"State: NUDGE_RIGHT"
 122      653A 204E 
 122      5544 4745 
 122      5F52 4947 
 122      4854 00
 123               	.LC7:
 124 0063 5374 6174 		.string	"State: HARD_RIGHT"
 124      653A 2048 
 124      4152 445F 
 124      5249 4748 
 124      5400 
 125               	.LC8:
 126 0075 5374 6F70 		.string	"Stop"
 126      00
 127               		.text
 129               	.global	stateMachine
 131               	stateMachine:
   1:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //
   2:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //  StateMachine.c
   3:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //  Robot_test
   4:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //
   5:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //  Created by Mark Lee Malmose on 20/03/15.
   6:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //  Copyright (c) 2015 Mark Lee Malmose. All rights reserved.
   7:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** //
   8:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
   9:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** #include "StateMachine.h"
  10:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** #include <util/delay.h>
  11:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** void sendUartToInterface(char command, char *message);
  12:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
  13:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** enum states {
  14:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     INIT,
  15:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     FORWARD,
  16:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     STOP,
  17:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     NUDGE_LEFT,
  18:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     HARD_LEFT,
  19:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     NUDGE_RIGHT,
  20:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     HARD_RIGHT
  21:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** };
  22:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
  23:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** enum states state = INIT;
  24:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
  25:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
  26:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
  27:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** 
  28:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** void stateMachine(void)
  29:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c **** {
 133               	.LM0:
 134               	.LFBB1:
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
  30:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     
  31:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****     switch (state) {
 140               	.LM1:
 141 0000 8091 0000 		lds r24,state
 142 0004 90E0      		ldi r25,0
 143 0006 8730      		cpi r24,7
 144 0008 9105      		cpc r25,__zero_reg__
 145 000a 00F0      		brlo .+2
 146 000c 00C0      		rjmp .L1
 147 000e FC01      		movw r30,r24
 148 0010 E050      		subi r30,lo8(-(gs(.L4)))
 149 0012 F040      		sbci r31,hi8(-(gs(.L4)))
 150 0014 0C94 0000 		jmp __tablejump2__
 151               		.section	.progmem.gcc_sw_table,"a",@progbits
 152               		.p2align	1
 153               	.L4:
 154 0000 0000      		.word gs(.L3)
 155 0002 0000      		.word gs(.L5)
 156 0004 0000      		.word gs(.L6)
 157 0006 0000      		.word gs(.L7)
 158 0008 0000      		.word gs(.L8)
 159 000a 0000      		.word gs(.L9)
 160 000c 0000      		.word gs(.L10)
 161               		.text
 162               	.L3:
  32:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case INIT:
  33:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: INIT");
 164               	.LM2:
 165 0018 60E0      		ldi r22,lo8(.LC0)
 166 001a 70E0      		ldi r23,hi8(.LC0)
 167 001c 88E4      		ldi r24,lo8(72)
 168 001e 0E94 0000 		call sendUartToInterface
  34:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('C', "Start");
 170               	.LM3:
 171 0022 60E0      		ldi r22,lo8(.LC1)
 172 0024 70E0      		ldi r23,hi8(.LC1)
 173 0026 83E4      		ldi r24,lo8(67)
 174 0028 0E94 0000 		call sendUartToInterface
  35:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             state = FORWARD;
 176               	.LM4:
 177 002c 81E0      		ldi r24,lo8(1)
 178 002e 00C0      		rjmp .L11
 179               	.L5:
  36:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             break;
  37:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             
  38:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case FORWARD:
  39:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: FORWARD");
 181               	.LM5:
 182 0030 60E0      		ldi r22,lo8(.LC2)
 183 0032 70E0      		ldi r23,hi8(.LC2)
 184 0034 88E4      		ldi r24,lo8(72)
 185 0036 0E94 0000 		call sendUartToInterface
  40:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             state = STOP;
 187               	.LM6:
 188 003a 82E0      		ldi r24,lo8(2)
 189 003c 00C0      		rjmp .L11
 190               	.L6:
  41:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             break;
  42:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             
  43:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case STOP:
  44:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: STOP");
 192               	.LM7:
 193 003e 60E0      		ldi r22,lo8(.LC3)
 194 0040 70E0      		ldi r23,hi8(.LC3)
 195 0042 88E4      		ldi r24,lo8(72)
 196 0044 0E94 0000 		call sendUartToInterface
  45:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             state = NUDGE_LEFT;
 198               	.LM8:
 199 0048 83E0      		ldi r24,lo8(3)
 200 004a 00C0      		rjmp .L11
 201               	.L7:
  46:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             break;
  47:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             
  48:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case NUDGE_LEFT:
  49:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: NUDGE_LEFT");
 203               	.LM9:
 204 004c 60E0      		ldi r22,lo8(.LC4)
 205 004e 70E0      		ldi r23,hi8(.LC4)
 206 0050 88E4      		ldi r24,lo8(72)
 207 0052 0E94 0000 		call sendUartToInterface
  50:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             state = HARD_LEFT;
 209               	.LM10:
 210 0056 84E0      		ldi r24,lo8(4)
 211 0058 00C0      		rjmp .L11
 212               	.L8:
  51:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             break;
  52:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             
  53:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case HARD_LEFT:
  54:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: HARD_LEFT");
 214               	.LM11:
 215 005a 60E0      		ldi r22,lo8(.LC5)
 216 005c 70E0      		ldi r23,hi8(.LC5)
 217 005e 88E4      		ldi r24,lo8(72)
 218 0060 0E94 0000 		call sendUartToInterface
  55:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             state = NUDGE_RIGHT;
 220               	.LM12:
 221 0064 85E0      		ldi r24,lo8(5)
 222 0066 00C0      		rjmp .L11
 223               	.L9:
  56:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             break;
  57:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             
  58:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case NUDGE_RIGHT:
  59:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: NUDGE_RIGHT");
 225               	.LM13:
 226 0068 60E0      		ldi r22,lo8(.LC6)
 227 006a 70E0      		ldi r23,hi8(.LC6)
 228 006c 88E4      		ldi r24,lo8(72)
 229 006e 0E94 0000 		call sendUartToInterface
  60:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             state = HARD_RIGHT;
 231               	.LM14:
 232 0072 86E0      		ldi r24,lo8(6)
 233               	.L11:
 234 0074 8093 0000 		sts state,r24
  61:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             break;
 236               	.LM15:
 237 0078 0895      		ret
 238               	.L10:
  62:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             
  63:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****         case HARD_RIGHT:
  64:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('H', "State: HARD_RIGHT");
 240               	.LM16:
 241 007a 60E0      		ldi r22,lo8(.LC7)
 242 007c 70E0      		ldi r23,hi8(.LC7)
 243 007e 88E4      		ldi r24,lo8(72)
 244 0080 0E94 0000 		call sendUartToInterface
 245               	.LBB4:
 246               	.LBB5:
 248               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 250               	.LM17:
 251 0084 2FEF      		ldi r18,lo8(9599999)
 252 0086 8BE7      		ldi r24,hi8(9599999)
 253 0088 92E9      		ldi r25,hlo8(9599999)
 254 008a 2150      		1: subi r18,1
 255 008c 8040      		sbci r24,0
 256 008e 9040      		sbci r25,0
 257 0090 01F4      		brne 1b
 258 0092 00C0      		rjmp .
 259 0094 0000      		nop
 260               	.LBE5:
 261               	.LBE4:
 263               	.Ltext2:
  65:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             //state = INIT;
  66:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             _delay_ms(3000);
  67:/Users/marklee/Documents/xcode/avr/DTU/Robot_test/Robot_test/StateMachine.c ****             sendUartToInterface('C', "Stop");
 265               	.LM18:
 266 0096 60E0      		ldi r22,lo8(.LC8)
 267 0098 70E0      		ldi r23,hi8(.LC8)
 268 009a 83E4      		ldi r24,lo8(67)
 269 009c 0C94 0000 		jmp sendUartToInterface
 270               	.L1:
 271 00a0 0895      		ret
 273               	.Lscope1:
 274               	.global	state
 275               		.section .bss
 278               	state:
 279 0000 00        		.zero	1
 281               		.text
 283               	.Letext0:
 284               		.ident	"GCC: (GNU) 4.8.1"
 285               	.global __do_copy_data
 286               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 StateMachine.c
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:2      *ABS*:0000003e __SP_H__
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:3      *ABS*:0000003d __SP_L__
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:4      *ABS*:0000003f __SREG__
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:5      *ABS*:0000003b __RAMPZ__
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:7      *ABS*:00000001 __zero_reg__
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:131    .text:00000000 stateMachine
/var/folders/67/_mbxvj9d2zz6j3r80jfbq2kw0000gn/T//ccbbQLNC.s:278    .bss:00000000 state

UNDEFINED SYMBOLS
__tablejump2__
sendUartToInterface
__do_copy_data
__do_clear_bss
